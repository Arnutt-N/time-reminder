/**
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ TiDB Cloud Serverless ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó Telegram
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PID ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏ú‡∏•‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
 */
const { LOG_LEVELS, botLog, logError } = require("./logger.js")
const mysql = require("mysql2/promise")
const dotenv = require("dotenv")
const fs = require("fs")
const path = require("path")

// tidb-connection.js - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ dayjs
const dayjs = require("dayjs")
const utc = require("dayjs/plugin/utc")
const timezone = require("dayjs/plugin/timezone")

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Day.js
dayjs.extend(utc)
dayjs.extend(timezone)
const THAI_TIMEZONE = "Asia/Bangkok"

dotenv.config()

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
let databaseInitialized = false
let initializationInProgress = false
let connectionPool = null

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ connection ‡πÅ‡∏¢‡∏Å ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å pool)
 */
async function getConnection() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!databaseInitialized) {
      botLog(
        LOG_LEVELS.WARN,
        "getConnection",
        "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
      )
      await initializeDatabase()
    }

    const options = {
      host: process.env.TIDB_HOST || "127.0.0.1",
      port: parseInt(process.env.TIDB_PORT || "4000"),
      user: process.env.TIDB_USER || "root",
      password: process.env.TIDB_PASSWORD || "",
      database: process.env.TIDB_DATABASE || "telegram_bot",
      ssl: {
        minVersion: "TLSv1.2",
        rejectUnauthorized: true,
      },
      supportBigNumbers: true,
      enableKeepAlive: true,
      dateStrings: true,
      connectionLimit: 10,
      timezone: "+07:00", // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone ‡πÄ‡∏õ‡πá‡∏ô GMT+7 (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
    }

    botLog(LOG_LEVELS.INFO, "database", "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Cloud...")
    const conn = await mysql.createConnection(options)
    botLog(LOG_LEVELS.INFO, "database", "üîå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TiDB Cloud ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á TiDB
    const [rows] = await conn.query("SELECT VERSION() AS version;")
    botLog(LOG_LEVELS.INFO, "database", `üìä ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô TiDB: ${rows[0].version}`)

    return conn
  } catch (error) {
    logError("database-connect", error)
    throw error
  }
}

/**
 * ‡∏î‡∏∂‡∏á connection ‡∏à‡∏≤‡∏Å pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 * ‡πÉ‡∏ä‡πâ connection pool ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
 * @returns {Promise<mysql.Connection>} database connection
 */
async function getPoolConnection() {
  if (!connectionPool) {
    throw new Error(
      "Connection pool ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å initializeDatabase ‡∏Å‡πà‡∏≠‡∏ô"
    )
  }

  try {
    return await connectionPool.getConnection()
  } catch (error) {
    logError("getPoolConnection", error)
    throw error
  }
}

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
 * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏≤‡∏¢ PID
 * @returns {Promise<boolean>} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 */
async function initializeDatabase() {
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏´‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  if (databaseInitialized) {
    botLog(
      LOG_LEVELS.INFO,
      "initializeDatabase",
      "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
    )
    return true
  }

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥‡∏´‡∏≤‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  if (initializationInProgress) {
    botLog(
      LOG_LEVELS.INFO,
      "initializeDatabase",
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà"
    )

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    let retryCount = 0
    const maxRetries = 30
    while (initializationInProgress && retryCount < maxRetries) {
      await new Promise((resolve) => setTimeout(resolve, 1000)) // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      retryCount++
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠
    if (databaseInitialized) {
      return true
    } else if (retryCount >= maxRetries) {
      throw new Error("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  initializationInProgress = true

  let conn
  let retries = 3 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà

  try {
    botLog(
      LOG_LEVELS.INFO,
      "initializeDatabase",
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (PID: " + process.pid + ")"
    )

    while (retries > 0) {
      try {
        const rootOptions = {
          host: process.env.TIDB_HOST || "127.0.0.1",
          port: parseInt(process.env.TIDB_PORT || "4000"),
          user: process.env.TIDB_USER || "root",
          password: process.env.TIDB_PASSWORD || "",
          ssl: {
            minVersion: "TLSv1.2",
            rejectUnauthorized: true,
          },
          supportBigNumbers: true,
          enableKeepAlive: true,
          dateStrings: true,
          connectionLimit: 10,
          timezone: "+07:00", // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timezone ‡πÄ‡∏õ‡πá‡∏ô GMT+7 (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
        }

        conn = await mysql.createConnection(rootOptions)

        botLog(
          LOG_LEVELS.INFO,
          "initializeDatabase",
          "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        )
        await conn.query(`CREATE DATABASE IF NOT EXISTS \`telegram_bot\`;`)
        await conn.query(`USE \`telegram_bot\`;`)

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        await conn.query(`
          CREATE TABLE IF NOT EXISTS users (
            chat_id VARCHAR(50) PRIMARY KEY,
            username VARCHAR(100),
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            date_added DATETIME DEFAULT CURRENT_TIMESTAMP,
            is_subscribed BOOLEAN DEFAULT TRUE
          );
        `)

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á holidays
        await conn.query(`
          CREATE TABLE IF NOT EXISTS holidays (
            holiday_date DATE PRIMARY KEY,
            holiday_name VARCHAR(255) NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
          );
        `)

        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° connection pool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        if (!connectionPool) {
          const poolOptions = {
            ...rootOptions,
            database: "telegram_bot",
            connectionLimit: 20,
            waitForConnections: true,
            queueLimit: 0,
          }

          connectionPool = mysql.createPool(poolOptions)
          botLog(
            LOG_LEVELS.INFO,
            "initializeDatabase",
            "‡∏™‡∏£‡πâ‡∏≤‡∏á connection pool ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
          )
        }

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        databaseInitialized = true
        initializationInProgress = false

        botLog(
          LOG_LEVELS.INFO,
          "initializeDatabase",
          "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
        )
        return true
      } catch (error) {
        retries--
        botLog(
          LOG_LEVELS.ERROR,
          "initializeDatabase",
          `‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${retries} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)`,
          error
        )

        if (retries === 0) {
          botLog(
            LOG_LEVELS.ERROR,
            "initializeDatabase",
            "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            error
          )
          initializationInProgress = false
          throw error
        }

        // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        await new Promise((resolve) => setTimeout(resolve, 2000))
      }
    }
    return false
  } catch (error) {
    initializationInProgress = false
    logError("initializeDatabase", error)
    throw error
  } finally {
    if (conn) {
      try {
        await conn.end()
      } catch (endError) {
        logError("initializeDatabase-connection-end", endError)
      }
    }
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function getSubscribedUsers() {
  let conn
  try {
    conn = await getConnection()
    const [rows] = await conn.query(`
      SELECT 
        chat_id as chatId, 
        username, 
        first_name as firstName, 
        last_name as lastName, 
        date_added as dateAdded 
      FROM users 
      WHERE is_subscribed = TRUE
    `)

    botLog(
      LOG_LEVELS.INFO,
      "getSubscribedUsers",
      `üìã ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${rows.length} ‡∏Ñ‡∏ô`
    )
    return rows
  } catch (error) {
    logError("getSubscribedUsers", error)
    return []
  } finally {
    if (conn) {
      await conn.end()
    }
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function updateUserSubscription(user, isSubscribed) {
  let conn
  try {
    conn = await getConnection()

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    if (!user) {
      botLog(LOG_LEVELS.ERROR, "updateUserSubscription", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
      return false
    }

    if (user.chatId === undefined || user.chatId === null) {
      botLog(
        LOG_LEVELS.ERROR,
        "updateUserSubscription",
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chatId ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
      )
      return false
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    botLog(
      LOG_LEVELS.DEBUG,
      "updateUserSubscription",
      "updateUserSubscription called with:",
      {
        user: {
          chatId: user.chatId,
          username: user.username,
          firstName: user.firstName,
          lastName: user.lastName,
        },
        isSubscribed: isSubscribed,
      }
    )

    // ‡πÅ‡∏õ‡∏•‡∏á chatId ‡πÄ‡∏õ‡πá‡∏ô String ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const chatIdStr = String(user.chatId)

    // ‡πÅ‡∏õ‡∏•‡∏á isSubscribed ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const boolSubscribed = isSubscribed ? 1 : 0

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingUsers] = await conn.query(
      "SELECT * FROM users WHERE chat_id = ?",
      [chatIdStr]
    )

    if (existingUsers.length > 0) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const [result] = await conn.query(
        "UPDATE users SET username = ?, first_name = ?, last_name = ?, is_subscribed = ? WHERE chat_id = ?",
        [
          user.username || "",
          user.firstName || "",
          user.lastName || "",
          boolSubscribed,
          chatIdStr,
        ]
      )
      botLog(
        LOG_LEVELS.INFO,
        "updateUserSubscription",
        `‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatIdStr} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö: ${result.affectedRows})`
      )
    } else {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
      const thaiTime = dayjs().tz(THAI_TIMEZONE).format("YYYY-MM-DD HH:mm:ss")

      const [result] = await conn.query(
        "INSERT INTO users (chat_id, username, first_name, last_name, date_added, is_subscribed) VALUES (?, ?, ?, ?, ?, ?)",
        [
          chatIdStr,
          user.username || "",
          user.firstName || "",
          user.lastName || "",
          thaiTime, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          boolSubscribed,
        ]
      )
      botLog(
        LOG_LEVELS.INFO,
        "updateUserSubscription",
        `‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ${chatIdStr} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
    }

    return true
  } catch (error) {
    logError("updateUserSubscription", error)
    return false
  } finally {
    if (conn) {
      await conn.end()
    }
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° chat ID
async function getUserByChatId(chatId) {
  let conn
  try {
    conn = await getConnection()

    // ‡πÅ‡∏õ‡∏•‡∏á chatId ‡πÄ‡∏õ‡πá‡∏ô String ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const chatIdStr = String(chatId)
    botLog(
      LOG_LEVELS.DEBUG,
      "getUserByChatId",
      `üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ chat_id: ${chatIdStr}`
    )

    const [rows] = await conn.query("SELECT * FROM users WHERE chat_id = ?", [
      chatIdStr,
    ])

    if (rows.length > 0) {
      botLog(
        LOG_LEVELS.DEBUG,
        "getUserByChatId",
        `üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatIdStr}`
      )
      return rows[0]
    } else {
      botLog(
        LOG_LEVELS.DEBUG,
        "getUserByChatId",
        `üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatIdStr}`
      )
      return null
    }
  } catch (error) {
    logError("getUserByChatId", error)
    return null
  } finally {
    if (conn) {
      await conn.end()
    }
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
async function isUserSubscribed(chatId) {
  let conn
  try {
    conn = await getConnection()

    // ‡πÅ‡∏õ‡∏•‡∏á chatId ‡πÄ‡∏õ‡πá‡∏ô String ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    const chatIdStr = String(chatId)

    const [rows] = await conn.query(
      "SELECT is_subscribed FROM users WHERE chat_id = ?",
      [chatIdStr]
    )

    if (rows.length > 0) {
      return !!rows[0].is_subscribed // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô boolean
    } else {
      return false // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    }
  } catch (error) {
    logError("isUserSubscribed", error)
    return false
  } finally {
    if (conn) {
      await conn.end()
    }
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
async function importHolidaysFromJson() {
  let conn
  try {
    const HOLIDAYS_FILE = path.join(__dirname, "holidays.json")
    if (fs.existsSync(HOLIDAYS_FILE)) {
      const data = JSON.parse(fs.readFileSync(HOLIDAYS_FILE, "utf8"))

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      conn = await getConnection()
      const [count] = await conn.query("SELECT COUNT(*) as count FROM holidays")
      if (count[0].count > 0) {
        botLog(
          LOG_LEVELS.INFO,
          "importHolidays",
          "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤"
        )
        return false
      }

      // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      let importCount = 0
      for (const date of data.holidays) {
        const holidayName = data.holidayDetails[date] || "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©"
        await conn.query(
          "INSERT INTO holidays (holiday_date, holiday_name) VALUES (?, ?)",
          [date, holidayName]
        )
        importCount++
      }

      botLog(
        LOG_LEVELS.INFO,
        "importHolidays",
        `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${importCount} ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
      )
      return true
    } else {
      botLog(LOG_LEVELS.ERROR, "importHolidays", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå holidays.json")
      return false
    }
  } catch (error) {
    logError("importHolidays", error)
    return false
  } finally {
    if (conn) {
      await conn.end()
    }
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
async function getAllHolidays() {
  let conn
  try {
    conn = await getConnection()
    const [rows] = await conn.query(
      "SELECT * FROM holidays ORDER BY holiday_date"
    )
    botLog(
      LOG_LEVELS.INFO,
      "getAllHolidays",
      `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    )
    return rows
  } catch (error) {
    logError("getAllHolidays", error)
    return []
  } finally {
    if (conn) await conn.end()
  }
}

async function addHoliday(date, name) {
  let conn
  try {
    conn = await getConnection()
    await conn.query(
      "INSERT INTO holidays (holiday_date, holiday_name) VALUES (?, ?) ON DUPLICATE KEY UPDATE holiday_name = ?",
      [date, name, name]
    )
    botLog(
      LOG_LEVELS.INFO,
      "addHoliday",
      `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${date} (${name}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
    return true
  } catch (error) {
    logError("addHoliday", error)
    return false
  } finally {
    if (conn) await conn.end()
  }
}

async function deleteHoliday(date) {
  let conn
  try {
    conn = await getConnection()
    const [result] = await conn.query(
      "DELETE FROM holidays WHERE holiday_date = ?",
      [date]
    )
    const success = result.affectedRows > 0
    if (success) {
      botLog(LOG_LEVELS.INFO, "deleteHoliday", `‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${date} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    } else {
      botLog(
        LOG_LEVELS.WARN,
        "deleteHoliday",
        `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${date} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`
      )
    }
    return success
  } catch (error) {
    logError("deleteHoliday", error)
    return false
  } finally {
    if (conn) await conn.end()
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô tidb-connection.js
async function searchHolidays(keyword) {
  let conn
  try {
    conn = await getConnection()
    const [rows] = await conn.query(
      "SELECT * FROM holidays WHERE holiday_name LIKE ? ORDER BY holiday_date",
      [`%${keyword}%`]
    )
    botLog(
      LOG_LEVELS.INFO,
      "searchHolidays",
      `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${keyword}" ‡∏û‡∏ö ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    )
    return rows
  } catch (error) {
    logError("searchHolidays", error)
    return []
  } finally {
    if (conn) await conn.end()
  }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô
module.exports = {
  getConnection,
  getPoolConnection,
  initializeDatabase,
  getSubscribedUsers,
  updateUserSubscription,
  getUserByChatId,
  isUserSubscribed,
  importHolidaysFromJson,
  getAllHolidays,
  addHoliday,
  deleteHoliday,
  searchHolidays,
}
