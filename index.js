// index.js - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
const TelegramBot = require("node-telegram-bot-api")
const cron = require("node-cron")
const http = require("http")
const fs = require("fs")
const path = require("path")
require("dotenv").config()

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©
const HOLIDAYS_FILE = path.join(__dirname, "holidays.json")

// ‡∏ô‡∏≥ token ‡∏Ç‡∏≠‡∏á bot ‡∏°‡∏≤‡∏à‡∏≤‡∏Å environment variable
const token = process.env.TELEGRAM_BOT_TOKEN
// Chat ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ
const chatId = process.env.TELEGRAM_CHAT_ID

// ‡∏™‡∏£‡πâ‡∏≤‡∏á flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
let botInitialized = false

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
if (botInitialized) {
  console.log("Bot already initialized. Exiting duplicate instance.")
  process.exit(0)
}

// URL ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏ö‡∏ô Render (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å deploy)
const appUrl = process.env.APP_URL || "https://your-app-name.onrender.com"

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©
function loadHolidays() {
  try {
    if (fs.existsSync(HOLIDAYS_FILE)) {
      const data = fs.readFileSync(HOLIDAYS_FILE, "utf8")
      return JSON.parse(data)
    }
  } catch (err) {
    console.error("Error loading holidays:", err)
  }
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  return {
    holidays: [], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    holidayDetails: {}, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠
    lastUpdated: new Date().toISOString(),
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD (‡∏Ñ.‡∏®.) ‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY (‡∏û.‡∏®.)
function isoDateToThaiDate(isoDateStr) {
  // ‡πÅ‡∏¢‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
  const [yearCE, month, day] = isoDateStr
    .split("-")
    .map((num) => parseInt(num, 10))
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
  const yearBE = yearCE + 543
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
  return `${day.toString().padStart(2, "0")}/${month
    .toString()
    .padStart(2, "0")}/${yearBE}`
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
let holidaysData = loadHolidays()
console.log(`Loaded ${holidaysData.holidays.length} special holidays from file`)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function isHoliday() {
  const now = new Date()
  const day = now.getDay() // 0 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå, 1 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ..., 6 = ‡πÄ‡∏™‡∏≤‡∏£‡πå

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
  if (day === 0 || day === 6) {
    return true
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©
  const today = now.toISOString().split("T")[0] // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
  return holidaysData.holidays.includes(today)
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á bot - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ polling: true ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const bot = new TelegramBot(token, { polling: true })
botInitialized = true

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
const currentServerTime = new Date()
console.log(`Bot is running... Server time: ${currentServerTime.toISOString()}`)
console.log(
  `Server timezone offset: ${currentServerTime.getTimezoneOffset() / -60} hours`
)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
function getThaiDate() {
  const date = new Date()
  const day = date.getDate()
  const month = date.getMonth() + 1
  const yearBE = date.getFullYear() + 543 // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÇ‡∏î‡∏¢‡∏ö‡∏ß‡∏Å 543
  return `${day}/${month}/${yearBE}`
}

// ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function getCheckInReminderMessage() {
  return `‚è∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()}`
}

function getCheckOutReminderMessage() {
  return `‚è∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()}`
}

function getMorningMessage() {
  return `üåû ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()} \n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡∏∞ üëç`
}

function getEveningMessage() {
  return `üåÜ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()} \n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ üôè`
}

// ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å cron job ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
try {
  for (const job of Object.values(cron.getTasks())) {
    job.stop()
  }
} catch (error) {
  console.log("No existing cron tasks to clear")
}

// ===== ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤ cron jobs ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ UTC ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î =====
// ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 7:25 ‡∏ô. = UTC 00:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
console.log(
  "Setting up check-in reminder cron job for 7:25 AM Thailand time (00:25 UTC) - Workdays only"
)
const morningReminder = cron.schedule("25 0 * * 1-5", () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (isHoliday()) {
    console.log("Today is a holiday. Skipping check-in reminder.")
    return
  }

  console.log(
    "Sending check-in reminder (7:25 Thai time)... " + new Date().toISOString()
  )
  const morningCheckinMessage =
    getMorningMessage() + "\n\n" + getCheckInReminderMessage()
  bot
    .sendMessage(chatId, morningCheckinMessage)
    .then(() => console.log("7:25 message sent successfully"))
    .catch((err) => console.error("Error sending message:", err))
})

// ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 8:25 ‡∏ô. = UTC 01:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
console.log(
  "Setting up morning message cron job for 8:25 AM Thailand time (01:25 UTC) - Workdays only"
)
const morningMessage = cron.schedule("25 1 * * 1-5", () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (isHoliday()) {
    console.log("Today is a holiday. Skipping morning message.")
    return
  }

  console.log(
    "Sending morning message (8:25 Thai time)... " + new Date().toISOString()
  )
  const morningFullMessage =
    getMorningMessage() + "\n\n" + getCheckInReminderMessage()
  bot
    .sendMessage(chatId, morningFullMessage)
    .then(() => console.log("8:25 message sent successfully"))
    .catch((err) => console.error("Error sending message:", err))
})

// ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 15:25 ‡∏ô. = UTC 08:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
console.log(
  "Setting up check-out reminder cron job for 15:25 PM Thailand time (08:25 UTC) - Workdays only"
)
const eveningReminder = cron.schedule("25 8 * * 1-5", () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (isHoliday()) {
    console.log("Today is a holiday. Skipping check-out reminder.")
    return
  }

  console.log(
    "Sending check-out reminder (15:25 Thai time)... " +
      new Date().toISOString()
  )
  const eveningCheckoutMessage =
    getEveningMessage() + "\n\n" + getCheckOutReminderMessage()
  bot
    .sendMessage(chatId, eveningCheckoutMessage)
    .then(() => console.log("15:25 message sent successfully"))
    .catch((err) => console.error("Error sending message:", err))
})

// ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 16:25 ‡∏ô. = UTC 09:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
console.log(
  "Setting up evening message cron job for 16:25 PM Thailand time (09:25 UTC) - Workdays only"
)
const eveningMessage = cron.schedule("25 9 * * 1-5", () => {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (isHoliday()) {
    console.log("Today is a holiday. Skipping evening message.")
    return
  }

  console.log(
    "Sending evening message (16:25 Thai time)... " + new Date().toISOString()
  )
  const eveningFullMessage =
    getEveningMessage() + "\n\n" + getCheckOutReminderMessage()
  bot
    .sendMessage(chatId, eveningFullMessage)
    .then(() => console.log("16:25 message sent successfully"))
    .catch((err) => console.error("Error sending evening message:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
// console.log("Setting up test cron job to run every 2 minutes")
// const testCron = cron.schedule("*/2 * * * *", () => {
//   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
//   if (isHoliday()) {
//     console.log("Today is a holiday. Skipping test message.")
//     return
//   }

//   const now = new Date()
//   const thaiTime = new Date(now.getTime() + 7 * 60 * 60 * 1000)
//   console.log(`Test cron executed at ${now.toISOString()}`)

//   bot.sendMessage(
//     chatId,
//     "üîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" +
//       "\n\n‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: " +
//       now.toISOString() +
//       "\n‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢: " +
//       thaiTime.toISOString()
//   )
// })

// ‡πÄ‡∏Å‡πá‡∏ö references ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å event handlers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
const handlers = {}

// ‡∏•‡πâ‡∏≤‡∏á event listeners ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
bot.removeAllListeners()

// ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
handlers.start = bot.onText(/^\/start$/, (msg) => {
  const welcomeMessage = `
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞! üëã
‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:
- ‚è∞ 7:25 ‡∏ô. (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤)
- üåû 8:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô)
- ‚è∞ 15:25 ‡∏ô. (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô + ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô)
- üåÜ 16:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô)

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
/status - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
/servertime - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
/checkin - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
/checkout - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô
/morning - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤
/evening - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô
/morning_full - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 7:25 ‡πÅ‡∏•‡∏∞ 8:25 (‡πÄ‡∏ä‡πâ‡∏≤+‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô)
/evening_full - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 15:25 ‡πÅ‡∏•‡∏∞ 16:25 (‡πÄ‡∏¢‡πá‡∏ô+‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô)
/list_holidays - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
/reload_holidays - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
  `

  bot
    .sendMessage(msg.chat.id, welcomeMessage)
    .then(() => console.log("Welcome message sent"))
    .catch((err) => console.error("Error sending welcome message:", err))
})

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
handlers.servertime = bot.onText(/^\/servertime$/, (msg) => {
  const now = new Date()
  const thaiTime = new Date(now.getTime() + 7 * 60 * 60 * 1000)

  const serverTimeMessage = `
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:
- ‡πÄ‡∏ß‡∏•‡∏≤ UTC: ${now.toISOString()}
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢: ${thaiTime.toISOString()}
- Timezone offset: ${now.getTimezoneOffset() / -60} hours
  `

  bot
    .sendMessage(msg.chat.id, serverTimeMessage)
    .then(() => console.log("Server time message sent"))
    .catch((err) => console.error("Error sending server time message:", err))
})

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
handlers.status = bot.onText(/^\/status$/, (msg) => {
  bot
    .sendMessage(
      msg.chat.id,
      "‚úÖ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î!"
    )
    .then(() => console.log("Status message sent"))
    .catch((err) => console.error("Error sending status message:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô
handlers.checkin = bot.onText(/^\/checkin$/, (msg) => {
  bot
    .sendMessage(msg.chat.id, getCheckInReminderMessage())
    .then(() => console.log("Check-in reminder sent"))
    .catch((err) => console.error("Error sending check-in reminder:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô
handlers.checkout = bot.onText(/^\/checkout$/, (msg) => {
  bot
    .sendMessage(msg.chat.id, getCheckOutReminderMessage())
    .then(() => console.log("Check-out reminder sent"))
    .catch((err) => console.error("Error sending check-out reminder:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤
handlers.morning = bot.onText(/^\/morning$/, (msg) => {
  bot
    .sendMessage(msg.chat.id, getMorningMessage())
    .then(() => console.log("Morning message sent"))
    .catch((err) => console.error("Error sending morning message:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô
handlers.evening = bot.onText(/^\/evening$/, (msg) => {
  bot
    .sendMessage(msg.chat.id, getEveningMessage())
    .then(() => console.log("Evening message sent"))
    .catch((err) => console.error("Error sending evening message:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
handlers.morningFull = bot.onText(/^\/morning_full$/, (msg) => {
  const morningFullMessage =
    getMorningMessage() + "\n\n" + getCheckInReminderMessage()
  console.log("Sending test morning_full message")
  bot
    .sendMessage(msg.chat.id, morningFullMessage)
    .then(() => console.log("Morning full message sent successfully"))
    .catch((err) => console.error("Error sending morning full message:", err))
})

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
handlers.eveningFull = bot.onText(/^\/evening_full$/, (msg) => {
  const eveningFullMessage =
    getEveningMessage() + "\n\n" + getCheckOutReminderMessage()
  console.log("Sending test evening_full message")
  bot
    .sendMessage(msg.chat.id, eveningFullMessage)
    .then(() => console.log("Evening full message sent successfully"))
    .catch((err) => console.error("Error sending evening full message:", err))
})

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
bot.onText(/^\/list_holidays$/, (msg) => {
  const chatId = msg.chat.id

  if (holidaysData.holidays.length === 0) {
    bot.sendMessage(chatId, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
  } else {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠
    const holidayListItems = holidaysData.holidays.map((isoDate) => {
      const thaiDate = isoDateToThaiDate(isoDate)
      const holidayName = holidaysData.holidayDetails[isoDate] || "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©"
      return `- ${thaiDate}  ${holidayName}`
    })

    const holidayList = holidayListItems.join("\n")
    const lastUpdated = new Date(holidaysData.lastUpdated).toLocaleString(
      "th-TH",
      {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      }
    )

    bot.sendMessage(
      chatId,
      `üìÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${holidaysData.holidays.length} ‡∏ß‡∏±‡∏ô):\n\n${holidayList}\n\n‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${lastUpdated}`
    )
  }
})

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
bot.onText(/^\/reload_holidays$/, async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  try {
    const chatMember = await bot.getChatMember(chatId, userId)
    const isGroupAdmin = ["creator", "administrator"].includes(
      chatMember.status
    )

    if (isGroupAdmin) {
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
      holidaysData = loadHolidays()
      bot.sendMessage(
        chatId,
        `‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${holidaysData.holidays.length} ‡∏ß‡∏±‡∏ô`
      )
    } else {
      bot.sendMessage(userId, "‚ö†Ô∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
    }
  } catch (error) {
    console.error("Error checking admin status:", error)
    bot.sendMessage(userId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
  }
})

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ /
bot.on("message", (msg) => {
  const chatId = msg.chat.id
  const messageText = msg.text || ""
  if (messageText && !messageText.startsWith("/")) {
    bot
      .sendMessage(
        chatId,
        `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì! ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå /start`
      )
      .then(() => console.log("Default response sent"))
      .catch((err) => console.error("Error sending default response:", err))
  }
})

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
bot.on("polling_error", (error) => {
  console.error("Polling error:", error)
})

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á HTTP server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ Keep-Alive
const server = http.createServer((req, res) => {
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  console.log(
    `Received HTTP request: ${req.method} ${req.url} from ${
      req.headers["user-agent"] || "Unknown"
    }`
  )

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ HTTP server
  try {
    bot
      .getMe()
      .then((botInfo) => {
        console.log(`Bot is working: ${botInfo.username}`)
      })
      .catch((error) => {
        console.error("Bot test failed:", error)
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó
        try {
          console.log("Attempting to restart bot polling...")
          bot.stopPolling()
          setTimeout(() => {
            bot.startPolling()
            console.log("Bot polling restarted successfully")
          }, 2000)
        } catch (e) {
          console.error("Failed to restart bot polling:", e)
        }
      })
  } catch (e) {
    console.error("Error in bot test:", e)
  }

  res.writeHead(200, { "Content-Type": "text/plain" })
  const now = new Date()
  const thaiTime = new Date(now.getTime() + 7 * 60 * 60 * 1000)
  res.end(
    `Bot is active! Server time: ${now.toISOString()}\nThai time: ${thaiTime.toISOString()}\n`
  )
})

const PORT = process.env.PORT || 3000
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`)
})

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Keep-Alive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ "‡∏´‡∏•‡∏±‡∏ö" ‡∏ö‡∏ô Render
function keepAlive() {
  const now = new Date()
  console.log("Pinging self to stay awake - " + now.toISOString())

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó
  try {
    bot
      .getMe()
      .then((botInfo) => {
        console.log(`Bot check OK: ${botInfo.username} at ${now.toISOString()}`)
      })
      .catch((error) => {
        console.error("Bot check failed:", error)
        try {
          bot.stopPolling()
          setTimeout(() => {
            bot.startPolling()
            console.log("Bot polling restarted after failure")
          }, 2000)
        } catch (e) {
          console.error("Failed to restart bot:", e)
        }
      })
  } catch (e) {
    console.error("Error in bot check:", e)
  }

  // Ping ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  try {
    http
      .get(appUrl, (res) => {
        console.log(`Ping status: ${res.statusCode}`)
      })
      .on("error", (err) => {
        console.error(`Ping failed: ${err.message}`)
      })
  } catch (err) {
    console.error("Error in keepAlive function:", err)
  }
}

// ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ping ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 ‡∏ô‡∏≤‡∏ó‡∏µ
const pingInterval = setInterval(keepAlive, 3 * 60 * 1000)

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
process.on("uncaughtException", (err) => {
  console.error("Uncaught Exception:", err)
  // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
})

process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason)
  // ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
})

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
process.on("SIGINT", () => {
  console.log("Shutting down bot gracefully...")

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏∏‡∏Å cron jobs
  morningReminder.stop()
  morningMessage.stop()
  eveningReminder.stop()
  eveningMessage.stop()
  testCron.stop()

  // ‡∏´‡∏¢‡∏∏‡∏î ping interval
  clearInterval(pingInterval)

  // ‡∏´‡∏¢‡∏∏‡∏î bot polling
  bot.stopPolling()

  // ‡∏õ‡∏¥‡∏î server
  server.close()

  console.log("Shutdown complete")
  process.exit(0)
})

// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
console.log("Bot setup complete, waiting for messages...")
console.log("Bot is ready to send reminders!")
console.log("Bot is running in production mode")