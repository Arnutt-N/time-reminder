// index.js - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PID ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏ú‡∏•‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö
const {
  initializeDatabase,
  getUserByChatId,
  getSubscribedUsers,
  updateUserSubscription,
  getAllHolidays,
  searchHolidays,
  getConnection,
  addHoliday,
  deleteHoliday,
  importHolidaysFromJson,
} = require("./tidb-connection.js")
const { LOG_LEVELS, botLog, logError } = require("./logger.js")
const TelegramBot = require("node-telegram-bot-api")
const cron = require("node-cron")
const fs = require("fs")
const path = require("path")
const express = require("express")
const dayjs = require("dayjs")
const utc = require("dayjs/plugin/utc")
const timezone = require("dayjs/plugin/timezone")
const config = require("./config") // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ config

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Day.js
dayjs.extend(utc)
dayjs.extend(timezone)
const THAI_TIMEZONE = "Asia/Bangkok"

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å config
const token = config.telegramBotToken;
const chatId = config.telegramChatId;
const appUrl = config.appUrl;
const port = config.port;
const HOLIDAYS_FILE = config.holidaysFile;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
let botInitialized = false
let holidaysData = {}
let appInitialized = false
let eventHandlersInitialized = false
let cronJobsInitialized = false
let hasStarted = false
let isTestCronRunning = false
let testCron = null

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ TELEGRAM_CHAT_ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if (!chatId) {
  console.warn(
    "TELEGRAM_CHAT_ID is not set. Messages will only be sent to individual subscribers."
  )
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express app
const app = express()
app.use(express.json())

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á bot ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ polling
const bot = new TelegramBot(token, { polling: false })

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô initializeApp ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
async function initializeApp() {
  try {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    if (appInitialized) {
      botLog(
        LOG_LEVELS.INFO,
        "initializeApp",
        "‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
      )
      return true
    }

    botLog(LOG_LEVELS.INFO, "initializeApp", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô")

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
    holidaysData = loadHolidays()
    botLog(LOG_LEVELS.DEBUG, "initializeApp", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î...")
    botLog(
      LOG_LEVELS.INFO,
      "initializeApp",
      `‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${holidaysData.holidays.length} ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå`
    )

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    botLog(LOG_LEVELS.INFO, "initializeApp", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    await initializeDatabase()
    botLog(LOG_LEVELS.INFO, "initializeApp", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const timeInfo = getServerTimeInfo()
    botLog(
      LOG_LEVELS.INFO,
      "initializeApp",
      `‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô... ‡πÄ‡∏ß‡∏•‡∏≤ UTC: ${timeInfo.utcTime}, ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢: ${timeInfo.thaiTime}`
    )
    botLog(
      LOG_LEVELS.INFO,
      "initializeApp",
      `‡∏Ñ‡πà‡∏≤ Timezone offset: ${timeInfo.offset} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
    )

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° server ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook
    return new Promise((resolve, reject) => {
      app
        .listen(port, async () => {
          try {
             // ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà kill ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™
+     holidaysData = loadHolidays();
+     try { await initializeDatabase(); } catch(e){ logError('initializeDatabase', e); }
            // ‡∏•‡πâ‡∏≤‡∏á webhook ‡πÄ‡∏î‡∏¥‡∏°
            botLog(LOG_LEVELS.INFO, "initializeApp", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö webhook ‡πÄ‡∏î‡∏¥‡∏°")
            await bot.deleteWebHook()

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ‡πÉ‡∏´‡∏°‡πà
            botLog(
              LOG_LEVELS.INFO,
              "initializeApp",
              `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ‡πÉ‡∏´‡∏°‡πà: ${appUrl}/bot${token}`
            )
            const webhookResult = await bot.setWebHook(`${appUrl}/bot${token}`)

            if (!webhookResult) {
              const errorMsg = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ‡πÑ‡∏î‡πâ"
              botLog(LOG_LEVELS.ERROR, "initializeApp", errorMsg)
              return reject(new Error(errorMsg))
            }

            botInitialized = true
            botLog(
              LOG_LEVELS.INFO,
              "initializeApp",
              `‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${port}`
            )
            botLog(
              LOG_LEVELS.INFO,
              "initializeApp",
              `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook: ${appUrl}/bot${token}`
            )

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers
            setupEventHandlers()
            botLog(
              LOG_LEVELS.INFO,
              "initializeApp",
              "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            )

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron jobs
            setupCronJobs()
            botLog(LOG_LEVELS.INFO, "initializeApp", "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron jobs ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            try {
              if (process.env.ADMIN_CHAT_ID) {
                const adminChatId = process.env.ADMIN_CHAT_ID
                botLog(
                  LOG_LEVELS.INFO,
                  "initializeApp",
                  `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${adminChatId}`
                )

                const startupMessage = `ü§ñ *‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!*\n\n‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${timeInfo.thaiTime}\n‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${appUrl}\n\n‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`

                await bot.sendMessage(adminChatId, startupMessage, {
                  parse_mode: "Markdown",
                })
                botLog(
                  LOG_LEVELS.INFO,
                  "initializeApp",
                  `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
                )

                // ‡∏™‡∏±‡πà‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                const simulatedMessage = {
                  message_id: Date.now(),
                  from: {
                    id: adminChatId,
                    first_name: "Admin",
                    is_bot: false,
                  },
                  chat: {
                    id: adminChatId,
                    type: "private",
                  },
                  date: Math.floor(Date.now() / 1000),
                  text: "/start",
                }

                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ processUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start
                await bot.processUpdate({ message: simulatedMessage })
                botLog(
                  LOG_LEVELS.INFO,
                  "initializeApp",
                  `‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
                )
              } else {
                botLog(
                  LOG_LEVELS.WARN,
                  "initializeApp",
                  `‡πÑ‡∏°‡πà‡∏û‡∏ö ADMIN_CHAT_ID ‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ`
                )
              }
            } catch (notifyError) {
              logError("initializeApp-admin-notify", notifyError)
              botLog(
                LOG_LEVELS.ERROR,
                "initializeApp",
                `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥`
              )
            }

            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            appInitialized = true
            resolve(true)
          } catch (error) {
            logError("initializeApp-webhook", error)
            reject(error)
          }
        })
        .on("error", (error) => {
          logError("initializeApp-server", error)
          reject(error)
        })
    })
  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô:", err)
    logError("initializeApp", err)
    process.exit(1)
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
async function startApplication() {
  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
  if (hasStarted) {
    botLog(LOG_LEVELS.INFO, "startApplication", "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
    return
  }

  try {
    botLog(LOG_LEVELS.INFO, "startApplication", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å
    if (fs.existsSync("bot.lock")) {
      const pid = parseInt(fs.readFileSync("bot.lock", "utf8"), 10)
      try {
        process.kill(pid, 0) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
        botLog(
          LOG_LEVELS.ERROR,
          "startApplication",
          `‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (PID: ${pid}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...`
        )
        process.exit(1)
      } catch (e) {
        botLog(
          LOG_LEVELS.WARN,
          "startApplication",
          `‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡πà‡∏≤ (PID: ${pid}) ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å...`
        )
        fs.unlinkSync("bot.lock")
      }
    }

    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
    fs.writeFileSync("bot.lock", process.pid.toString())
    botLog(
      LOG_LEVELS.INFO,
      "startApplication",
      `‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (PID: ${process.pid})`
    )

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏¥‡∏î
    const cleanup = () => {
      try {
        if (fs.existsSync("bot.lock")) {
          fs.unlinkSync("bot.lock")
          botLog(
            LOG_LEVELS.INFO,
            "startApplication",
            "‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
          )
        }
      } catch (err) {
        logError("startApplication-cleanup", err)
      }
    }

    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    process.removeAllListeners("exit")
    process.removeAllListeners("SIGINT")
    process.removeAllListeners("uncaughtException")

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡∏°‡πà
    process.on("exit", cleanup)
    process.on("SIGINT", () => {
      cleanup()
      process.exit(0)
    })
    process.on("uncaughtException", (err) => {
      logError("uncaughtException", err)
      cleanup()
      process.exit(1)
    })

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    await initializeApp()
    botLog(
      LOG_LEVELS.INFO,
      "startApplication",
      "‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    )

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    hasStarted = true
  } catch (err) {
    logError("startApplication", err)
    process.exit(1)
  }
}

// ‡πÉ‡∏ä‡πâ dayjs ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ó‡∏ô Date ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤
function getServerTimeInfo() {
  const utcNow = dayjs().utc()
  const thaiNow = utcNow.tz(THAI_TIMEZONE)

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì timezone offset ‡πÅ‡∏¢‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
  const offsetMinutes = thaiNow.utcOffset()
  const offsetHours = Math.floor(offsetMinutes / 60)
  const offsetMins = offsetMinutes % 60

  return {
    utcTime: utcNow.format(`DD/MM/${utcNow.year() + 543} - HH:mm ‡∏ô. (UTC)`),
    thaiTime: thaiNow.format(
      `DD/MM/${thaiNow.year() + 543} - HH:mm ‡∏ô. (UTC+7)`
    ),
    thaiDate: thaiNow.format(`DD/MM/${thaiNow.year() + 543}`),
    offset: offsetHours,
    offsetMinutes: offsetMins,
    isWeekend: isWeekend(thaiNow),
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
function loadHolidays() {
  try {
    if (fs.existsSync(HOLIDAYS_FILE)) {
      const data = fs.readFileSync(HOLIDAYS_FILE, "utf8")
      return JSON.parse(data)
    }
  } catch (err) {
    console.error("Error loading holidays:", err)
  }
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  return {
    holidays: [], // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    holidayDetails: {}, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠
    lastUpdated: new Date().toISOString(),
  }
}

function saveHolidays() {
  try {
    fs.writeFileSync(
      HOLIDAYS_FILE,
      JSON.stringify(holidaysData, null, 2),
      "utf8"
    )
    return true
  } catch (err) {
    console.error("Error saving holidays:", err)
    return false
  }
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy ‡πÅ‡∏•‡∏∞ d/m/yyyy
function thaiDateToIsoDate(thaiDate) {
  try {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á dd/mm/yyyy ‡πÅ‡∏•‡∏∞ d/m/yyyy
    const datePattern = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/
    const match = thaiDate.match(datePattern)

    if (!match) {
      botLog(
        LOG_LEVELS.WARN,
        "thaiDateToIsoDate",
        `‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${thaiDate}`
      )
      return null
    }

    const day = match[1].padStart(2, "0")
    const month = match[2].padStart(2, "0")
    const yearBE = parseInt(match[3], 10)
    const yearCE = yearBE - 543 // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.

    const result = `${yearCE}-${month}-${day}`

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if (!dayjs(result).isValid()) {
      botLog(
        LOG_LEVELS.WARN,
        "thaiDateToIsoDate",
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á: ${result}`
      )
      return null
    }

    return result
  } catch (error) {
    logError("thaiDateToIsoDate", error)
    return null
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å ISO ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function isoDateToThaiDateFull(isoDateStr) {
  try {
    const date = dayjs(isoDateStr)
    if (!date.isValid()) {
      botLog(
        LOG_LEVELS.WARN,
        "isoDateToThaiDateFull",
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${isoDateStr}`
      )
      return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    }

    const thaiMonths = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
      "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
      "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
      "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
      "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
      "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
      "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
      "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
      "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
    ]

    const result = `${date.date()} ${thaiMonths[date.month()]} ${
      date.year() + 543
    }`
    return result
  } catch (error) {
    logError("isoDateToThaiDateFull", error)
    return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
function isValidThaiDate(thaiDate) {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy
  const datePattern = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/
  const match = thaiDate.match(datePattern)

  if (!match) return false

  const day = parseInt(match[1], 10)
  const month = parseInt(match[2], 10)
  const yearBE = parseInt(match[3], 10)

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤
  if (day < 1 || day > 31) return false
  if (month < 1 || month > 12) return false
  if (yearBE < 2500 || yearBE > 2600) return false // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•

  const yearCE = yearBE - 543
  const date = dayjs(`${yearCE}-${month}-${day}`)

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 31/04/2568)
  return date.isValid() && date.date() === day
}

function isoUTCToThaiDateTime(isoDateStr, includeSeconds = true) {
  const date = dayjs(isoDateStr).utc()
  if (!date.isValid()) return "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
  return date.format(
    `DD/MM/${date.year() + 543} HH:mm${includeSeconds ? ":ss" : ""}`
  )
}

function getThaiDate() {
  const date = dayjs().tz(THAI_TIMEZONE)
  return date.format(`DD/MM/${date.year() + 543}`)
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏•‡πÑ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
async function isHoliday() {
  try {
    const now = dayjs().tz(THAI_TIMEZONE)
    const day = now.day() // 0 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå, 1 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ..., 6 = ‡πÄ‡∏™‡∏≤‡∏£‡πå
    const today = now.format("YYYY-MM-DD")

    botLog(
      LOG_LEVELS.DEBUG,
      "isHoliday",
      `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: ${today}, ‡∏ß‡∏±‡∏ô: ${day}`
    )

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
    if (day === 0 || day === 6) {
      botLog(LOG_LEVELS.INFO, "isHoliday", `${today} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå`)
      return true
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try {
      const { getConnection } = require("./tidb-connection.js") // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
      let conn = await getConnection()
      const [rows] = await conn.query(
        "SELECT * FROM holidays WHERE holiday_date = ?",
        [today]
      )
      await conn.end()

      if (rows.length > 0) {
        botLog(
          LOG_LEVELS.INFO,
          "isHoliday",
          `${today} ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©: ${rows[0].holiday_name}`
        )
        return true
      }

      botLog(LOG_LEVELS.DEBUG, "isHoliday", `${today} ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î`)
      return false
    } catch (dbError) {
      logError("isHoliday-db", dbError)

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å JSON ‡πÅ‡∏ó‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)
      botLog(
        LOG_LEVELS.WARN,
        "isHoliday",
        `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON ‡πÅ‡∏ó‡∏ô`
      )
      return holidaysData.holidays.includes(today)
    }
  } catch (error) {
    logError("isHoliday", error)
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ false (‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    return false
  }
}

// ‡πÅ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
function isWeekend(date) {
  const day = date.day() // 0 = ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå, 1 = ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå, ..., 6 = ‡πÄ‡∏™‡∏≤‡∏£‡πå
  return day === 0 || day === 6
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function getCheckInReminderMessage() {
  return `‚è∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()}`
}

function getCheckOutReminderMessage() {
  return `‚è∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()}`
}

function getMorningMessage() {
  return `üåû ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()} \n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡∏∞ üëç`
}

function getEveningMessage() {
  return `üåÜ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô! ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${getThaiDate()} \n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡πà‡∏°‡πÄ‡∏ó‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡∏∞ üôè`
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check
app.get("/ping", (req, res) => {
  botLog(LOG_LEVELS.DEBUG, "ping", "Health check received")
  res.status(200).send("pong")
})

app.get("/health", async (req, res) => {
  try {
    const serverTimeInfo = getServerTimeInfo()
    
    // Test database connection
    let databaseStatus = "disconnected"
    try {
      const dbConnection = await getConnection()
      await dbConnection.query('SELECT 1')
      await dbConnection.end()
      databaseStatus = "connected"
    } catch (dbError) {
      databaseStatus = "failed"
    }
    
    // Test Telegram API
    let telegramApiStatus = "disconnected"
    try {
      const botInfo = await bot.getMe()
      telegramApiStatus = botInfo ? "connected" : "failed"
    } catch (telegramError) {
      telegramApiStatus = "failed"
    }
    
    // Check webhook status  
    let webhookStatus = "inactive"
    try {
      const webhookInfo = await bot.getWebhookInfo()
      webhookStatus = webhookInfo.url ? "active" : "inactive"
    } catch (webhookError) {
      webhookStatus = "failed"
    }

    const healthData = {
      status: "ok",
      platform: "google-cloud-run",
      service: process.env.K_SERVICE,
      revision: process.env.K_REVISION,
      region: process.env.GOOGLE_CLOUD_REGION,
      uptime: process.uptime(),
      timestamp: new Date().toISOString(),
      memory_limit: process.env.MEMORY_LIMIT || "256Mi",
      cpu_limit: process.env.CPU_LIMIT || "0.25",
      checks: {
        bot_initialized: botInitialized,
        database: databaseStatus,
        telegram_api: telegramApiStatus,
        webhook: webhookStatus,
        cron_jobs: cronJobsInitialized || false,
        timezone: dayjs().tz(THAI_TIMEZONE).format()
      },
      server_time: {
        utc: serverTimeInfo.utcTime,
        thai: serverTimeInfo.thaiTime,
        offset: serverTimeInfo.offset,
      },
    }
    
    // Structured logging for Cloud Run
    if (config.cloudRun.isCloudRun) {
      console.log(JSON.stringify({
        timestamp: new Date().toISOString(),
        severity: 'INFO',
        component: 'health-check',
        message: 'Health check successful',
        service: process.env.K_SERVICE,
        revision: process.env.K_REVISION,
        checks: healthData.checks
      }))
    } else {
      botLog(LOG_LEVELS.DEBUG, "health", "Health check response", healthData)
    }
    
    res.status(200).json(healthData)
  } catch (error) {
    logError("health", error)
    
    const errorData = {
      status: "error",
      platform: "google-cloud-run",
      service: process.env.K_SERVICE,
      error: error.message,
      timestamp: new Date().toISOString()
    }
    
    // Structured error logging for Cloud Run
    if (config.cloudRun.isCloudRun) {
      console.log(JSON.stringify({
        timestamp: new Date().toISOString(),
        severity: 'ERROR',
        component: 'health-check', 
        message: 'Health check failed',
        error: error.message,
        service: process.env.K_SERVICE
      }))
    }
    
    res.status(500).json(errorData)
  }
})

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Telegram
app.post(`/bot${token}`, (req, res) => {
  try {
    botLog(LOG_LEVELS.DEBUG, "webhook", "Received update from Telegram", {
      updateId: req.body.update_id,
      chatId: req.body.message?.chat?.id,
    })

    bot.processUpdate(req.body)
    res.sendStatus(200)
  } catch (error) {
    logError("webhook", error)
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á 200 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Telegram ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥
    res.sendStatus(200)
  }
})

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook
app.get("/webhook-info", async (req, res) => {
  try {
    const info = await bot.getWebHookInfo()
    console.log("Current webhook info:", info)
    res.json(info)
  } catch (error) {
    console.error("Error getting webhook info:", error)
    res.status(500).json({ error: error.message })
  }
})

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï webhook
app.get("/reset-webhook", async (req, res) => {
  try {
    botLog(LOG_LEVELS.INFO, "resetWebhook", "Deleting webhook...")
    await bot.deleteWebHook()

    botLog(
      LOG_LEVELS.INFO,
      "resetWebhook",
      `Setting new webhook to: ${appUrl}/bot${token}`
    )
    const result = await bot.setWebHook(`${appUrl}/bot${token}`)

    botLog(LOG_LEVELS.INFO, "resetWebhook", "Webhook reset result:", result)
    res.send(`Webhook reset successfully: ${result}`)
  } catch (error) {
    logError("resetWebhook", error)
    res.status(500).send(`Error: ${error.message}`)
  }
})

// External Cron Endpoint for GitHub Actions
app.post("/api/cron", async (req, res) => {
  try {
    // Verify authorization to prevent unauthorized triggers
    const authHeader = req.headers.authorization
    if (!authHeader || authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      botLog(LOG_LEVELS.WARN, "cron-endpoint", "Unauthorized cron request", {
        ip: req.ip,
        userAgent: req.get('user-agent')
      })
      return res.status(401).json({error: "Unauthorized"})
    }
    
    const { type, time } = req.body
    
    // Validate request body
    if (!type || !time) {
      return res.status(400).json({error: "Missing required fields: type, time"})
    }
    
    if (!['morning', 'afternoon', 'evening'].includes(type)) {
      return res.status(400).json({error: "Invalid cron type. Must be: morning, afternoon, or evening"})
    }
    
    botLog(LOG_LEVELS.INFO, "cron-trigger", `Received ${type} reminder trigger for ${time}`)
    
    // Route to appropriate reminder function
    switch(type) {
      case 'morning':
        await sendMorningReminder()
        break
      case 'afternoon':
        await sendAfternoonReminder()  
        break
      case 'evening':
        await sendEveningReminder()
        break
      default:
        return res.status(400).json({error: "Invalid cron type"})
    }
    
    res.status(200).json({
      success: true,
      type: type,
      time: time,
      executed_at: new Date().toISOString(),
      platform: "google-cloud-run"
    })
    
  } catch (error) {
    logError("cron-endpoint", error)
    res.status(500).json({error: error.message})
  }
})

// Helper functions for external cron triggers
async function sendMorningReminder() {
  try {
    // Check for holidays
    if (await isHoliday()) {
      botLog(LOG_LEVELS.INFO, "sendMorningReminder", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
      return
    }
    
    botLog(LOG_LEVELS.INFO, "sendMorningReminder", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤")
    
    const morningMessage = getMorningMessage() + "\n\n" + getCheckInReminderMessage()
    
    // Send to group/channel if configured
    if (chatId) {
      try {
        await bot.sendMessage(chatId, morningMessage)
        botLog(LOG_LEVELS.INFO, "sendMorningReminder", "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
      } catch (err) {
        logError("sendMorningReminder-group", err)
      }
    }
    
    // Send to individual subscribers
    const subscribers = await getSubscribedUsers()
    botLog(LOG_LEVELS.INFO, "sendMorningReminder", `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`)
    
    for (const user of subscribers) {
      try {
        await bot.sendMessage(user.chatId, morningMessage)
        botLog(LOG_LEVELS.DEBUG, "sendMorningReminder", `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ ${user.chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
      } catch (error) {
        logError("sendMorningReminder-user", error)
      }
    }
  } catch (error) {
    logError("sendMorningReminder", error)
    throw error
  }
}

async function sendAfternoonReminder() {
  try {
    // Check for holidays  
    if (await isHoliday()) {
      botLog(LOG_LEVELS.INFO, "sendAfternoonReminder", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
      return
    }
    
    botLog(LOG_LEVELS.INFO, "sendAfternoonReminder", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢")
    
    const afternoonMessage = getMorningMessage() + "\n\n" + getCheckInReminderMessage()
    
    // Send to group/channel if configured
    if (chatId) {
      try {
        await bot.sendMessage(chatId, afternoonMessage)
        botLog(LOG_LEVELS.INFO, "sendAfternoonReminder", "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
      } catch (err) {
        logError("sendAfternoonReminder-group", err)
      }
    }
    
    // Send to individual subscribers
    const subscribers = await getSubscribedUsers()
    botLog(LOG_LEVELS.INFO, "sendAfternoonReminder", `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`)
    
    for (const user of subscribers) {
      try {
        await bot.sendMessage(user.chatId, afternoonMessage)
        botLog(LOG_LEVELS.DEBUG, "sendAfternoonReminder", `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ ${user.chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
      } catch (error) {
        logError("sendAfternoonReminder-user", error)
      }
    }
  } catch (error) {
    logError("sendAfternoonReminder", error)
    throw error
  }
}

async function sendEveningReminder() {
  try {
    // Check for holidays
    if (await isHoliday()) {
      botLog(LOG_LEVELS.INFO, "sendEveningReminder", "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
      return
    }
    
    botLog(LOG_LEVELS.INFO, "sendEveningReminder", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô")
    
    const eveningMessage = getEveningMessage() + "\n\n" + getCheckOutReminderMessage()
    
    // Send to group/channel if configured
    if (chatId) {
      try {
        await bot.sendMessage(chatId, eveningMessage)
        botLog(LOG_LEVELS.INFO, "sendEveningReminder", "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
      } catch (err) {
        logError("sendEveningReminder-group", err)
      }
    }
    
    // Send to individual subscribers
    const subscribers = await getSubscribedUsers()
    botLog(LOG_LEVELS.INFO, "sendEveningReminder", `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`)
    
    for (const user of subscribers) {
      try {
        await bot.sendMessage(user.chatId, eveningMessage)
        botLog(LOG_LEVELS.DEBUG, "sendEveningReminder", `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏´‡πâ ${user.chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
      } catch (error) {
        logError("sendEveningReminder-user", error)
      }
    }
  } catch (error) {
    logError("sendEveningReminder", error)
    throw error
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron jobs - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
function setupCronJobs() {
  try {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    if (cronJobsInitialized) {
      botLog(LOG_LEVELS.INFO, "setupCronJobs", "Cron jobs ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
      return
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å cron job ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
    botLog(
      LOG_LEVELS.INFO,
      "setupCronJobs",
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á cron jobs ‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà"
    )
    try {
      for (const job of Object.values(cron.getTasks())) {
        job.stop()
      }
    } catch (error) {
      botLog(
        LOG_LEVELS.INFO,
        "setupCronJobs",
        "‡πÑ‡∏°‡πà‡∏°‡∏µ cron jobs ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á"
      )
    }

    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 7:25 ‡∏ô. = UTC 00:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    botLog(
      LOG_LEVELS.INFO,
      "setupCronJobs",
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron job ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô 7:25 ‡∏ô. (00:25 UTC) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    )

    const morningReminder = cron.schedule("25 0 * * 1-5", async () => {
      try {
        if (await isHoliday()) {
          botLog(
            LOG_LEVELS.INFO,
            "morningReminder",
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
          )
          return
        }

        botLog(
          LOG_LEVELS.INFO,
          "morningReminder",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô (7:25 ‡∏ô.) ${new Date().toISOString()}`
        )

        const morningCheckinMessage =
          getMorningMessage() + "\n\n" + getCheckInReminderMessage()

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á
        if (chatId) {
          try {
            await bot.sendMessage(chatId, morningCheckinMessage)
            botLog(
              LOG_LEVELS.INFO,
              "morningReminder",
              "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            )
          } catch (err) {
            logError("morningReminder-group", err)
          }
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        const subscribers = await getSubscribedUsers()
        botLog(
          LOG_LEVELS.INFO,
          "morningReminder",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`
        )

        for (const user of subscribers) {
          try {
            await bot.sendMessage(user.chatId, morningCheckinMessage)
            botLog(
              LOG_LEVELS.DEBUG,
              "morningReminder",
              `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
                user.username || user.firstName || user.chatId
              } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
            )
          } catch (err) {
            logError("morningReminder-user", err)
            botLog(
              LOG_LEVELS.ERROR,
              "morningReminder",
              `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.chatId} ‡πÑ‡∏î‡πâ`
            )
          }
        }

        botLog(
          LOG_LEVELS.INFO,
          "morningReminder",
          "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 7:25 ‡∏ô. ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        )
      } catch (err) {
        logError("morningReminder", err)
      }
    })

    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 8:25 ‡∏ô. = UTC 01:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    botLog(
      LOG_LEVELS.INFO,
      "setupCronJobs",
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron job ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 8:25 ‡∏ô. (01:25 UTC) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    )

    const morningMessage = cron.schedule("25 1 * * 1-5", async () => {
      try {
        if (await isHoliday()) {
          botLog(
            LOG_LEVELS.INFO,
            "morningMessage",
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
          )
          return
        }

        botLog(
          LOG_LEVELS.INFO,
          "morningMessage",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ (8:25 ‡∏ô.) ${new Date().toISOString()}`
        )

        const morningFullMessage =
          getMorningMessage() + "\n\n" + getCheckInReminderMessage()

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á
        if (chatId) {
          try {
            await bot.sendMessage(chatId, morningFullMessage)
            botLog(
              LOG_LEVELS.INFO,
              "morningMessage",
              "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            )
          } catch (err) {
            logError("morningMessage-group", err)
          }
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        const subscribers = await getSubscribedUsers()
        botLog(
          LOG_LEVELS.INFO,
          "morningMessage",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`
        )

        for (const user of subscribers) {
          try {
            await bot.sendMessage(user.chatId, morningFullMessage)
            botLog(
              LOG_LEVELS.DEBUG,
              "morningMessage",
              `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
                user.username || user.firstName || user.chatId
              } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
            )
          } catch (err) {
            logError("morningMessage-user", err)
            botLog(
              LOG_LEVELS.ERROR,
              "morningMessage",
              `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.chatId} ‡πÑ‡∏î‡πâ`
            )
          }
        }

        botLog(
          LOG_LEVELS.INFO,
          "morningMessage",
          "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ 8:25 ‡∏ô. ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        )
      } catch (err) {
        logError("morningMessage", err)
      }
    })

    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 15:25 ‡∏ô. = UTC 08:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    botLog(
      LOG_LEVELS.INFO,
      "setupCronJobs",
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron job ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô 15:25 ‡∏ô. (08:25 UTC) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    )

    const eveningReminder = cron.schedule("25 8 * * 1-5", async () => {
      try {
        if (await isHoliday()) {
          botLog(
            LOG_LEVELS.INFO,
            "eveningReminder",
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
          )
          return
        }

        botLog(
          LOG_LEVELS.INFO,
          "eveningReminder",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô (15:25 ‡∏ô.) ${new Date().toISOString()}`
        )

        const eveningCheckoutMessage =
          getEveningMessage() + "\n\n" + getCheckOutReminderMessage()

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á
        if (chatId) {
          try {
            await bot.sendMessage(chatId, eveningCheckoutMessage)
            botLog(
              LOG_LEVELS.INFO,
              "eveningReminder",
              "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            )
          } catch (err) {
            logError("eveningReminder-group", err)
          }
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        const subscribers = await getSubscribedUsers()
        botLog(
          LOG_LEVELS.INFO,
          "eveningReminder",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`
        )

        for (const user of subscribers) {
          try {
            await bot.sendMessage(user.chatId, eveningCheckoutMessage)
            botLog(
              LOG_LEVELS.DEBUG,
              "eveningReminder",
              `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
                user.username || user.firstName || user.chatId
              } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
            )
          } catch (err) {
            logError("eveningReminder-user", err)
            botLog(
              LOG_LEVELS.ERROR,
              "eveningReminder",
              `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.chatId} ‡πÑ‡∏î‡πâ`
            )
          }
        }

        botLog(
          LOG_LEVELS.INFO,
          "eveningReminder",
          "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 15:25 ‡∏ô. ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        )
      } catch (err) {
        logError("eveningReminder", err)
      }
    })

    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ 16:25 ‡∏ô. = UTC 09:25 ‡∏ô. (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
    botLog(
      LOG_LEVELS.INFO,
      "setupCronJobs",
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron job ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô 16:25 ‡∏ô. (09:25 UTC) - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    )

    const eveningMessage = cron.schedule("25 9 * * 1-5", async () => {
      try {
        if (await isHoliday()) {
          botLog(
            LOG_LEVELS.INFO,
            "eveningMessage",
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"
          )
          return
        }

        botLog(
          LOG_LEVELS.INFO,
          "eveningMessage",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô (16:25 ‡∏ô.) ${new Date().toISOString()}`
        )

        const eveningFullMessage =
          getEveningMessage() + "\n\n" + getCheckOutReminderMessage()

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á
        if (chatId) {
          try {
            await bot.sendMessage(chatId, eveningFullMessage)
            botLog(
              LOG_LEVELS.INFO,
              "eveningMessage",
              "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°/‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
            )
          } catch (err) {
            logError("eveningMessage-group", err)
          }
        }

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        const subscribers = await getSubscribedUsers()
        botLog(
          LOG_LEVELS.INFO,
          "eveningMessage",
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${subscribers.length} ‡∏Ñ‡∏ô`
        )

        for (const user of subscribers) {
          try {
            await bot.sendMessage(user.chatId, eveningFullMessage)
            botLog(
              LOG_LEVELS.DEBUG,
              "eveningMessage",
              `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
                user.username || user.firstName || user.chatId
              } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
            )
          } catch (err) {
            logError("eveningMessage-user", err)
            botLog(
              LOG_LEVELS.ERROR,
              "eveningMessage",
              `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${user.chatId} ‡πÑ‡∏î‡πâ`
            )
          }
        }

        botLog(
          LOG_LEVELS.INFO,
          "eveningMessage",
          "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô 16:25 ‡∏ô. ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        )
      } catch (err) {
        logError("eveningMessage", err)
      }
    })

    botLog(LOG_LEVELS.INFO, "setupCronJobs", "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cron jobs ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ testCron ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    testCron = cron.schedule(
      "*/2 * * * *",
      async () => {
        try {
          if (!process.env.TELEGRAM_CHAT_ID) {
            botLog(
              LOG_LEVELS.ERROR,
              "testCron",
              "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ TELEGRAM_CHAT_ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ"
            )
            return
          }

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isHoliday
          const holidayToday = await isHoliday()
          const holidayStatus = holidayToday ? "‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"

          const now = dayjs().utc() // ‡πÄ‡∏ß‡∏•‡∏≤ UTC
          const thaiNow = now.tz(THAI_TIMEZONE) // ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7)
          botLog(
            LOG_LEVELS.INFO,
            "testCron",
            `‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà ${now.toISOString()}`
          )

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (UTC)
          const serverTime = now.format(
            `DD/MM/${now.year() + 543} - HH:mm ‡∏ô. (UTC)`
          )
          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7)
          const thaiTime = thaiNow.format(
            `DD/MM/${thaiNow.year() + 543} - HH:mm ‡∏ô. (UTC+7)`
          )
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì timezone offset
          const offsetMinutesTotal = now.utcOffset() // UTC offset (0)
          const thaiOffsetMinutes = thaiNow.utcOffset() // UTC+7 offset (420)
          const offsetDiff = Math.abs(thaiOffsetMinutes - offsetMinutesTotal)
          const offsetHours = Math.floor(offsetDiff / 60)
          const offsetMinutes = offsetDiff % 60

          const message = `
üîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ - ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${serverTime}
‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢: ${thaiTime}
Timezone offset: ${offsetHours} hours ${offsetMinutes} mins
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: ${holidayStatus}
          `

          try {
            await bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message.trim())
            botLog(
              LOG_LEVELS.INFO,
              "testCron",
              `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${process.env.TELEGRAM_CHAT_ID} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
            )
          } catch (sendError) {
            logError("testCron-send", sendError)
          }
        } catch (err) {
          logError("testCron", err)
        }
      },
      {
        scheduled: false, // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        timezone: "UTC",
      }
    )

    // ‡πÄ‡∏Å‡πá‡∏ö references ‡πÑ‡∏ß‡πâ
    cronJobsInitialized = true
    return {
      morningReminder,
      morningMessage,
      eveningReminder,
      eveningMessage,
      testCron,
    }
  } catch (error) {
    logError("setupCronJobs", error)
    return null
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function isAdmin(chatId) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ ADMIN_CHAT_ID ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô)
    if (String(chatId) === process.env.ADMIN_CHAT_ID) {
      return true
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const userInfo = await getUserByChatId(chatId)
    return userInfo && userInfo.role === "admin"
  } catch (error) {
    logError("isAdmin", error)
    // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env ‡πÅ‡∏ó‡∏ô
    return String(chatId) === process.env.ADMIN_CHAT_ID
  }
}

// ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ handlers ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
const COMMAND_PERMISSIONS = {
  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  myinfo: {
    permission: "user",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
    regex: /^\/myinfo$/,
  },
  subscribe: {
    permission: "user",
    description: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
    regex: /^\/subscribe$/,
  },
  unsubscribe: {
    permission: "user",
    description: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
    regex: /^\/unsubscribe$/,
  },
  status: {
    permission: "user",
    description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó",
    regex: /^\/status$/,
  },
  list_holidays: {
    permission: "user",
    description: "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
    regex: /^\/list_holidays$/,
  },
  search_holiday: {
    permission: "user",
    description: "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô /\u200Bsearch_holiday ‡∏ß‡∏±‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
    regex: /^\/search_holiday\s+(.+)$/,
  },

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô COMMAND_PERMISSIONS

  servertime: {
    permission: "admin",
    description: "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
    regex: /^\/servertime$/,
  },
  dbstatus: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" + "\n",
    regex: /^\/dbstatus$/,
  },
  checkin: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô",
    regex: /^\/checkin$/,
  },
  checkout: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô",
    regex: /^\/checkout$/,
  },
  morning: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤",
    regex: /^\/morning$/,
  },
  evening: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô",
    regex: /^\/evening$/,
  },
  morning_full: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 7:25 ‡πÅ‡∏•‡∏∞ 8:25 (‡πÄ‡∏ä‡πâ‡∏≤+‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô)",
    regex: /^\/morning_full$/,
  },
  evening_full: {
    permission: "admin",
    description: "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 15:25 ‡πÅ‡∏•‡∏∞ 16:25 (‡πÄ‡∏¢‡πá‡∏ô+‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô)" + "\n",
    regex: /^\/evening_full$/,
  },
  add_holiday: {
    permission: "admin",
    description:
      "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô /\u200Badd... 01/01/2568 ‡∏ß‡∏±‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
    regex: /^\/add_holiday\s+(\d{1,2}\/\d{1,2}\/\d{4})(?:\s+(.+))?$/,
  },
  delete_holiday: {
    permission: "admin",
    description: "‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô /\u200Bdel... 01/01/2568",
    regex: /^\/delete_holiday\s+(\d{1,2}\/\d{1,2}\/\d{4})$/,
  },
  reload_holidays: {
    permission: "admin",
    description: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà",
    regex: /^\/reload_holidays$/,
  },
  import_holidays: {
    permission: "admin",
    description: "‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)",
    regex: /^\/import_holidays$/,
  },
  force_import_holidays: {
    permission: "admin",
    description:
      "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)" + "\n",
    regex: /^\/force_import_holidays$/,
  },
  add_admin: {
    permission: "admin",
    description: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô /\u200Badd... 1234567890",
    regex: /^\/add_admin\s+(\d+)$/,
  },
  remove_admin: {
    permission: "admin",
    description: "‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô /\u200Brem... 1234567890",
    regex: /^\/remove_admin\s+(\d+)$/,
  },
  list_admins: {
    permission: "admin",
    description: "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" + "\n",
    regex: /^\/list_admins$/,
  },
  start_test: {
    permission: "admin",
    description: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ",
    regex: /^\/start_test$/,
  },
  stop_test: {
    permission: "admin",
    description: "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
    regex: /^\/stop_test$/,
  },
  cron_job: {
    permission: "admin",
    description: "‡∏ó‡∏î‡∏™‡∏≠‡∏ö cron job ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÄ‡∏ä‡πà‡∏ô /\u200Bcron... HH.mm",
    regex: /^\/cron_job\s+(\d{1,2})\.(\d{2})$/,
  },
  reset_webhook: {
    permission: "admin",
    description: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï webhook (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á)",
    regex: /^\/reset_webhook$/,
  },

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
  start: {
    permission: "all", // ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡πÑ‡∏î‡πâ
    description: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
    regex: /^\/(start|help)$/,
  },
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function buildCommandLists() {
  const USER_COMMANDS = Object.entries(COMMAND_PERMISSIONS)
    .filter(([_, cmd]) => cmd.permission === "user" || cmd.permission === "all")
    .map(([cmdName, cmd]) => `/${cmdName} - ${cmd.description}`)

  const ADMIN_COMMANDS = Object.entries(COMMAND_PERMISSIONS)
    .filter(([_, cmd]) => cmd.permission === "admin")
    .map(([cmdName, cmd]) => `/${cmdName} - ${cmd.description}`)

  return { USER_COMMANDS, ADMIN_COMMANDS }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
async function checkPermission(chatId, permission) {
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
  if (permission === "all") return true

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (permission === "admin" && !(await isAdmin(chatId))) {
    await bot.sendMessage(
      chatId,
      "‚õî ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏á‡∏ß‡∏ô‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
    )
    botLog(
      LOG_LEVELS.WARN,
      "permission-check",
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatId} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô`
    )
    return false
  }

  return true
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers
function setupEventHandlers() {
  try {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    if (eventHandlersInitialized) {
      botLog(
        LOG_LEVELS.INFO,
        "setupEventHandlers",
        "Event handlers ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
      )
      return
    }

    // ‡∏•‡πâ‡∏≤‡∏á event listeners ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    botLog(
      LOG_LEVELS.INFO,
      "setupEventHandlers",
      "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers ‡πÉ‡∏´‡∏°‡πà"
    )
    bot.removeAllListeners()

    // ‡πÄ‡∏Å‡πá‡∏ö references ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å event handlers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    const handlers = {}

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô /start
    const { USER_COMMANDS, ADMIN_COMMANDS } = buildCommandLists()

    // ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô /start
    handlers.start = bot.onText(/^\/(start|help)$/, async (msg) => {
      try {
        const chatId = msg.chat.id
        const isAdminUser = await isAdmin(chatId)
        botLog(
          LOG_LEVELS.INFO,
          "command-start",
          `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start (Admin: ${isAdminUser})`
        )

        let welcomeMessage = `
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞! üëã
‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:

- ‚è∞ 7:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô)
- üåû 8:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô)
- ‚è∞ 15:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô)
- üåÜ 16:25 ‡∏ô. (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô)

‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:
${USER_COMMANDS.join("\n")}
`

        if (isAdminUser) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
          welcomeMessage += `
  
üîë ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö:
${ADMIN_COMMANDS.join("\n")}
`
        }

        await bot.sendMessage(chatId, welcomeMessage)
        botLog(
          LOG_LEVELS.INFO,
          "command-start",
          `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ ${
            isAdminUser ? "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô" : "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
          }: ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
        )
      } catch (error) {
        logError("command-start", error)
      }
    })

    // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô /start ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
    for (const [cmdName, cmdConfig] of Object.entries(COMMAND_PERMISSIONS)) {
      if (cmdName === "start") continue // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô /start ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

      handlers[cmdName] = bot.onText(cmdConfig.regex, async (msg, match) => {
        try {
          const chatId = msg.chat.id
          const username = msg.from?.username || ""
          const firstName = msg.from?.first_name || ""

          botLog(
            LOG_LEVELS.INFO,
            `command-${cmdName}`,
            `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
              username || firstName || chatId
            } ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /${cmdName}`
          )

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
          if (!(await checkPermission(chatId, cmdConfig.permission))) {
            return
          }

          // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
          await handleCommand(cmdName, msg, match)
        } catch (error) {
          logError(`command-${cmdName}`, error)
          try {
            await bot.sendMessage(
              msg.chat.id,
              `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /${cmdName} ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
            )
          } catch (sendError) {
            logError(`command-${cmdName}-sendError`, sendError)
          }
        }
      })
    }

    botLog(
      LOG_LEVELS.INFO,
      "setupEventHandlers",
      "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event handlers ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    )

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    eventHandlersInitialized = true
    return handlers
  } catch (error) {
    logError("setupEventHandlers", error)
    return {}
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
async function handleCommand(cmdName, msg, match) {
  const chatId = msg.chat.id
  const username = msg.from?.username || ""
  const firstName = msg.from?.first_name || ""

  switch (cmdName) {
    case "servertime":
      await handleServertime(msg)
      break

    case "status":
      await bot.sendMessage(
        chatId,
        "‚úÖ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î!"
      )
      botLog(
        LOG_LEVELS.INFO,
        "command-status",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "subscribe":
      await handleSubscribe(msg)
      break

    case "unsubscribe":
      await handleUnsubscribe(msg)
      break

    case "myinfo":
      await handleMyInfo(msg)
      break

    case "checkin":
      await bot.sendMessage(chatId, getCheckInReminderMessage())
      botLog(
        LOG_LEVELS.INFO,
        "command-checkin",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ${
          username || firstName || chatId
        } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "checkout":
      await bot.sendMessage(chatId, getCheckOutReminderMessage())
      botLog(
        LOG_LEVELS.INFO,
        "command-checkout",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ ${
          username || firstName || chatId
        } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "morning":
      await bot.sendMessage(chatId, getMorningMessage())
      botLog(
        LOG_LEVELS.INFO,
        "command-morning",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ ${username || firstName || chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "evening":
      await bot.sendMessage(chatId, getEveningMessage())
      botLog(
        LOG_LEVELS.INFO,
        "command-evening",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏´‡πâ ${username || firstName || chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "morning_full":
      const morningFullMessage =
        getMorningMessage() + "\n\n" + getCheckInReminderMessage()
      await bot.sendMessage(chatId, morningFullMessage)
      botLog(
        LOG_LEVELS.INFO,
        "command-morning_full",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ ${username || firstName || chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "evening_full":
      const eveningFullMessage =
        getEveningMessage() + "\n\n" + getCheckOutReminderMessage()
      await bot.sendMessage(chatId, eveningFullMessage)
      botLog(
        LOG_LEVELS.INFO,
        "command-evening_full",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏´‡πâ ${username || firstName || chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "add_holiday":
      await handleAddHoliday(msg, match)
      break

    case "delete_holiday":
      await handleDeleteHoliday(msg, match)
      break

    case "list_holidays":
      await handleListHolidays(msg)
      break

    case "search_holiday":
      await handleSearchHoliday(msg, match)
      break

    case "reload_holidays":
      holidaysData = loadHolidays()
      await bot.sendMessage(
        chatId,
        `‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${holidaysData.holidays.length} ‡∏ß‡∏±‡∏ô`
      )
      botLog(
        LOG_LEVELS.INFO,
        "command-reload_holidays",
        `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${holidaysData.holidays.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
      break

    case "import_holidays":
      await handleImportHolidays(msg)
      break

    case "force_import_holidays":
      await handleForceImportHolidays(msg)
      break

    case "dbstatus":
      await handleDbStatus(msg)
      break

    case "start_test":
      await handleStartTest(msg)
      break

    case "stop_test":
      await handleStopTest(msg)
      break

    case "reset_webhook":
      await handleResetWebhook(msg)
      break

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô switch-case ‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleCommand
    case "add_admin":
      await handleAddAdmin(msg, match)
      break

    case "remove_admin":
      await handleRemoveAdmin(msg, match)
      break

    case "list_admins":
      await handleListAdmins(msg)
      break

    case "cron_job":
      await handleCronJob(msg, match)
      break

    default:
      await bot.sendMessage(chatId, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
async function handleServertime(msg) {
  const chatId = msg.chat.id
  const timeInfo = getServerTimeInfo()

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  let holidayStatus = "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î"

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏Å‡πà‡∏≠‡∏ô
  if (timeInfo.isWeekend) {
    holidayStatus = "‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå"
  } else {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try {
      const isSpecialHoliday = await isHoliday()
      if (isSpecialHoliday) {
        holidayStatus = "‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©"
      }
    } catch (error) {
      logError("handleServertime-holiday-check", error)
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ó‡∏ô
      botLog(
        LOG_LEVELS.WARN,
        "handleServertime",
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÅ‡∏ó‡∏ô"
      )
    }
  }

  const serverTimeMessage = `
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå:

- ‡πÄ‡∏ß‡∏•‡∏≤ UTC: ${timeInfo.utcTime}
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢: ${timeInfo.thaiTime}
- Timezone offset: ${timeInfo.offset} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${timeInfo.offsetMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î: ${holidayStatus}
`

  await bot.sendMessage(chatId, serverTimeMessage)
  botLog(
    LOG_LEVELS.INFO,
    "command-servertime",
    `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
  )
}

async function handleSubscribe(msg) {
  const chatId = msg.chat.id
  const username = msg.from.username || ""
  const firstName = msg.from.first_name || ""
  const lastName = msg.from.last_name || ""

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const userInfo = await getUserByChatId(chatId)

  if (userInfo && userInfo.is_subscribed) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    await bot.sendMessage(
      chatId,
      "‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-subscribe",
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${username || firstName || chatId} ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`
    )
    return
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£
  await updateUserSubscription(
    {
      chatId: chatId,
      username: username,
      firstName: firstName,
      lastName: lastName,
    },
    true
  )

  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà
  if (!userInfo) {
    await bot.sendMessage(
      chatId,
      "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-subscribe",
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ${username || firstName || chatId} ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(
      chatId,
      "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á! ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-subscribe",
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤ ${
        username || firstName || chatId
      } ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`
    )
  }
}

async function handleUnsubscribe(msg) {
  const chatId = msg.chat.id
  const username = msg.from.username || ""
  const firstName = msg.from.first_name || ""

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ updateUserSubscription ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ DELETE
  const success = await updateUserSubscription(
    {
      chatId: chatId,
      username: msg.from.username || "",
      firstName: msg.from.first_name || "",
      lastName: msg.from.last_name || "",
    },
    false // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ is_subscribed ‡πÄ‡∏õ‡πá‡∏ô false ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
  )

  if (success) {
    await bot.sendMessage(chatId, "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    botLog(
      LOG_LEVELS.INFO,
      "command-unsubscribe",
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${username || firstName || chatId} ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(
      chatId,
      "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    )
    botLog(
      LOG_LEVELS.WARN,
      "command-unsubscribe",
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
        username || firstName || chatId
      } ‡πÑ‡∏î‡πâ`
    )
  }
}

async function handleMyInfo(msg) {
  const chatId = msg.chat.id
  const username = msg.from.username || ""
  const firstName = msg.from.first_name || ""

  const userInfo = await getUserByChatId(chatId)
  if (userInfo) {
    const statusText = userInfo.is_subscribed
      ? "‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
      : "‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"

    let registrationDate = userInfo.date_added || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    if (registrationDate !== "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏") {
      const date = dayjs(userInfo.date_added).tz(THAI_TIMEZONE)
      registrationDate = date.format(`DD/MM/${date.year() + 543} - HH:mm ‡∏ô.`)
    }

    const fullName =
      [userInfo.first_name, userInfo.last_name].filter(Boolean).join(" ") ||
      "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
    const message = `
üìã *‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö*:

- *‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•*: ${fullName}
- *Username*: ${userInfo.username ? "@" + userInfo.username : "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"}
- *‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô*: ${registrationDate}
- *‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°*: ${statusText}

${
  userInfo.is_subscribed
    ? "üö´ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Ñ‡∏•‡∏¥‡∏Å /unsubscribe"
    : "üìù ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Ñ‡∏•‡∏¥‡∏Å /subscribe"
}
        `
    await bot.sendMessage(chatId, message, { parse_mode: "Markdown" })
    botLog(
      LOG_LEVELS.INFO,
      "command-myinfo",
      `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ ${username || firstName || chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(
      chatId,
      "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ ‡∏Ñ‡∏•‡∏¥‡∏Å /subscribe ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-myinfo",
      `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${username || firstName || chatId} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`
    )
  }
}

async function handleListHolidays(msg) {
  const chatId = msg.chat.id
  const username = msg.from.username || ""
  const firstName = msg.from.first_name || ""

  const holidays = await getAllHolidays()
  if (holidays.length === 0) {
    await bot.sendMessage(chatId, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ")
    botLog(LOG_LEVELS.INFO, "command-list_holidays", `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`)
    return
  }

  let holidayList = "üìÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©:\n\n"
  holidays.forEach((holiday) => {
    const date = dayjs(holiday.holiday_date)
    const thaiDate = date.format(`DD/MM/${date.year() + 543}`) // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    holidayList += `${thaiDate} - ${holiday.holiday_name}\n`
  })

  await bot.sendMessage(chatId, holidayList)
  botLog(
    LOG_LEVELS.INFO,
    "command-list_holidays",
    `‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${holidays.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
      username || firstName || chatId
    } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
  )
}

async function handleSearchHoliday(msg, match) {
  const chatId = msg.chat.id
  const keyword = match[1]
  const username = msg.from.username || ""
  const firstName = msg.from.first_name || ""

  const holidays = await searchHolidays(keyword)
  if (holidays.length === 0) {
    await bot.sendMessage(chatId, `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${keyword}"`)
    botLog(
      LOG_LEVELS.INFO,
      "command-search_holiday",
      `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "${keyword}"`
    )
    return
  }

  let resultList = `üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î "${keyword}":\n\n`
  holidays.forEach((holiday) => {
    const date = dayjs(holiday.holiday_date)
    const thaiDate = date.format(`DD/MM/${date.year() + 543}`)
    resultList += `${thaiDate} - ${holiday.holiday_name}\n`
  })

  await bot.sendMessage(chatId, resultList)
  botLog(
    LOG_LEVELS.INFO,
    "command-search_holiday",
    `‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${holidays.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${
      username || firstName || chatId
    } ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
  )
}

async function handleAddHoliday(msg, match) {
  const chatId = msg.chat.id
  const thaiDate = match[1]
  const description = match[2] || "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©"

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô ISO
  const isoDate = thaiDateToIsoDate(thaiDate)
  if (!isoDate) {
    await bot.sendMessage(
      chatId,
      "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ(‡∏û.‡∏®.) ‡πÄ‡∏ä‡πà‡∏ô 01/01/2568"
    )
    botLog(
      LOG_LEVELS.WARN,
      "command-add_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${thaiDate}`
    )
    return
  }

  const success = await addHoliday(isoDate, description)
  if (success) {
    await bot.sendMessage(
      chatId,
      `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} (${description}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-add_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} (${description}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î")
    botLog(
      LOG_LEVELS.ERROR,
      "command-add_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} (${description}) ‡πÑ‡∏î‡πâ`
    )
  }
}

async function handleDeleteHoliday(msg, match) {
  const chatId = msg.chat.id
  const thaiDate = match[1]

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô ISO
  const isoDate = thaiDateToIsoDate(thaiDate)
  if (!isoDate) {
    await bot.sendMessage(
      chatId,
      "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ(‡∏û.‡∏®.) ‡πÄ‡∏ä‡πà‡∏ô 01/01/2568"
    )
    botLog(
      LOG_LEVELS.WARN,
      "command-delete_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${thaiDate}`
    )
    return
  }

  const success = await deleteHoliday(isoDate)
  if (success) {
    await bot.sendMessage(chatId, `‚úÖ ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
    botLog(
      LOG_LEVELS.INFO,
      "command-delete_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(
      chatId,
      `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö`
    )
    botLog(
      LOG_LEVELS.WARN,
      "command-delete_holiday",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î ${thaiDate} ‡πÑ‡∏î‡πâ`
    )
  }
}

async function handleImportHolidays(msg) {
  const chatId = msg.chat.id

  const result = await importHolidaysFromJson()
  if (result) {
    await bot.sendMessage(
      chatId,
      "‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-import_holidays",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(
      chatId,
      "‚ÑπÔ∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡πâ‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /force_import_holidays"
    )
    botLog(
      LOG_LEVELS.INFO,
      "command-import_holidays",
      `‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤`
    )
  }
}

async function handleForceImportHolidays(msg) {
  const chatId = msg.chat.id

  try {
    let conn = await getConnection()
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await conn.query("TRUNCATE TABLE holidays")
    await conn.end()

    botLog(
      LOG_LEVELS.INFO,
      "command-force_import_holidays",
      `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )

    // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    const result = await importHolidaysFromJson()
    if (result) {
      await bot.sendMessage(
        chatId,
        "‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
      )
      botLog(
        LOG_LEVELS.INFO,
        "command-force_import_holidays",
        `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏à‡∏≤‡∏Å JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
    } else {
      await bot.sendMessage(chatId, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏î‡πâ")
      botLog(
        LOG_LEVELS.ERROR,
        "command-force_import_holidays",
        `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏î‡πâ`
      )
    }
  } catch (dbError) {
    logError("command-force_import_holidays-db", dbError)
    await bot.sendMessage(
      chatId,
      "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + dbError.message
    )
  }
}

async function handleDbStatus(msg) {
  const chatId = msg.chat.id

  const subscribers = await getSubscribedUsers()
  const conn = await getConnection()

  // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const [totalUsers] = await conn.query("SELECT COUNT(*) as count FROM users")
  await conn.end()

  const message = `
üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:

- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalUsers[0].count} ‡∏Ñ‡∏ô
- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${subscribers.length} ‡∏Ñ‡∏ô
      `

  await bot.sendMessage(chatId, message)
  botLog(
    LOG_LEVELS.INFO,
    "command-dbstatus",
    `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
  )
}

async function handleStartTest(msg) {
  const chatId = msg.chat.id

  if (isTestCronRunning) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
    botLog(LOG_LEVELS.WARN, "command-start_test", `‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`)
    return
  }

  if (testCron) {
    testCron.start()
    isTestCronRunning = true
    await bot.sendMessage(chatId, "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ")
    botLog(
      LOG_LEVELS.INFO,
      "command-start_test",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } else {
    await bot.sendMessage(chatId, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏û‡∏ö cron job")
    botLog(
      LOG_LEVELS.ERROR,
      "command-start_test",
      `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° testCron ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á`
    )
  }
}

async function handleStopTest(msg) {
  const chatId = msg.chat.id

  if (!isTestCronRunning || !testCron) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà!")
    botLog(
      LOG_LEVELS.WARN,
      "command-stop_test",
      `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà`
    )
    return
  }

  testCron.stop()
  isTestCronRunning = false
  await bot.sendMessage(chatId, "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
  botLog(
    LOG_LEVELS.INFO,
    "command-stop_test",
    `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
  )
}

async function handleResetWebhook(msg) {
  const chatId = msg.chat.id

  await bot.deleteWebHook()
  botLog(LOG_LEVELS.INFO, "command-reset_webhook", `‡∏•‡∏ö webhook ‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

  const result = await bot.setWebHook(`${appUrl}/bot${token}`)
  botLog(
    LOG_LEVELS.INFO,
    "command-reset_webhook",
    `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook ‡πÉ‡∏´‡∏°‡πà: ${appUrl}/bot${token} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${result}`
  )

  await bot.sendMessage(
    chatId,
    `‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï webhook ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nWebhook URL: ${appUrl}/bot${token}`
  )
}

async function handleAddAdmin(msg, match) {
  const adminChatId = msg.chat.id
  const targetChatId = match[1]

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const userInfo = await getUserByChatId(targetChatId)

  if (!userInfo) {
    await bot.sendMessage(
      adminChatId,
      "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start ‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏Å‡πà‡∏≠‡∏ô"
    )
    return
  }

  if (userInfo.role === "admin") {
    await bot.sendMessage(adminChatId, "‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    return
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  try {
    const conn = await getConnection()
    await conn.query("UPDATE users SET role = 'admin' WHERE chat_id = ?", [
      targetChatId,
    ])
    await conn.end()

    await bot.sendMessage(
      adminChatId,
      `‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ${targetChatId} ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    await bot.sendMessage(
      targetChatId,
      "üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡πâ‡∏ß!"
    )

    botLog(
      LOG_LEVELS.INFO,
      "admin-management",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${adminChatId} ‡πÄ‡∏û‡∏¥‡πà‡∏° ${targetChatId} ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } catch (error) {
    logError("add-admin", error)
    await bot.sendMessage(adminChatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
  }
}

async function handleRemoveAdmin(msg, match) {
  const adminChatId = msg.chat.id
  const targetChatId = match[1]

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  if (String(targetChatId) === String(adminChatId)) {
    await bot.sendMessage(adminChatId, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
    return
  }

  // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á super admin (‡∏à‡∏≤‡∏Å .env)
  if (String(targetChatId) === process.env.ADMIN_CHAT_ID) {
    await bot.sendMessage(
      adminChatId,
      "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á Super Admin ‡πÑ‡∏î‡πâ"
    )
    return
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const userInfo = await getUserByChatId(targetChatId)

  if (!userInfo) {
    await bot.sendMessage(adminChatId, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    return
  }

  if (userInfo.role !== "admin") {
    await bot.sendMessage(adminChatId, "‚ÑπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
    return
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
  try {
    const conn = await getConnection()
    await conn.query("UPDATE users SET role = 'user' WHERE chat_id = ?", [
      targetChatId,
    ])
    await conn.end()

    await bot.sendMessage(
      adminChatId,
      `‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${targetChatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )

    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    await bot.sendMessage(targetChatId, "‚ÑπÔ∏è ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß")

    botLog(
      LOG_LEVELS.INFO,
      "admin-management",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${adminChatId} ‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${targetChatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } catch (error) {
    logError("remove-admin", error)
    await bot.sendMessage(adminChatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
  }
}

async function handleListAdmins(msg) {
  const chatId = msg.chat.id

  try {
    const conn = await getConnection()
    const [admins] = await conn.query(
      "SELECT chat_id, username, first_name, last_name FROM users WHERE role = 'admin'"
    )
    await conn.end()

    if (admins.length === 0) {
      await bot.sendMessage(
        chatId,
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° Super Admin ‡∏à‡∏≤‡∏Å .env)"
      )
      return
    }

    let message = "üëë ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:\n\n"

    admins.forEach((admin, index) => {
      const name =
        [admin.first_name, admin.last_name].filter(Boolean).join(" ") ||
        "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"
      const username = admin.username ? `@${admin.username}` : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

      message += `${index + 1}. ${name} (${username})\n`
      message += `   ID: ${admin.chat_id}\n`

      if (String(admin.chat_id) === process.env.ADMIN_CHAT_ID) {
        message += "   üî± Super Admin\n"
      }

      message += "\n"
    })

    await bot.sendMessage(chatId, message)
    botLog(
      LOG_LEVELS.INFO,
      "command-list_admins",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${admins.length} ‡∏Ñ‡∏ô`
    )
  } catch (error) {
    logError("list-admins", error)
    await bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á cron_job
async function handleCronJob(msg, match) {
  const chatId = msg.chat.id;
  const hours = parseInt(match[1]);
  const minutes = parseInt(match[2]);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
  if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ HH.mm (00.00 - 23.59)");
    return;
  }
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ (UTC+7) ‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á cron job
  let utcHours = hours - 7;
  if (utcHours < 0) utcHours += 24;
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á cron expression
  const cronExpression = `${minutes} ${utcHours} * * *`;
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á cron
  const thaiTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} ‡∏ô. (UTC+7)`;
  const utcTime = `${utcHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')} (UTC)`;
  
  await bot.sendMessage(
    chatId, 
    `üïí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á cron job ‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ ${thaiTime}\n` +
    `‚è±Ô∏è ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ ${utcTime}\n` +
    `üìã Cron expression: ${cronExpression}\n\n` +
    `‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà... ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤`
  );
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
  let scheduledTime = new Date();
  scheduledTime.setHours(hours);
  scheduledTime.setMinutes(minutes);
  scheduledTime.setSeconds(0);
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
  const now = new Date();
  if (scheduledTime < now) {
    scheduledTime.setDate(scheduledTime.getDate() + 1);
  }
  
  const timeUntilExecution = scheduledTime.getTime() - now.getTime();
  const minutesUntil = Math.round(timeUntilExecution / 60000);
  
  await bot.sendMessage(
    chatId,
    `‚è≥ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${minutesUntil} ‡∏ô‡∏≤‡∏ó‡∏µ ` +
    `(${scheduledTime.toLocaleTimeString('th-TH', { timeZone: 'Asia/Bangkok' })})`
  );
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á cron job ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  const testCronJob = cron.schedule(cronExpression, async () => {
    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      await bot.sendMessage(
        chatId,
        `üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${thaiTime}\n` +
        `‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á cron job ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /cron_job ${hours}.${minutes.toString().padStart(2, '0')}`
      );
      
      botLog(
        LOG_LEVELS.INFO,
        "testCronJob",
        `‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö cron ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${chatId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏ß‡∏•‡∏≤: ${thaiTime})`
      );
      
      // ‡∏´‡∏¢‡∏∏‡∏î cron job ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
      testCronJob.stop();
    } catch (error) {
      logError("testCronJob", error);
      try {
        await bot.sendMessage(
          chatId,
          "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
      } catch (sendError) {
        logError("testCronJob-sendError", sendError);
      }
      testCronJob.stop();
    }
  }, {
    scheduled: true,
    timezone: "UTC" // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô UTC ‡πÅ‡∏•‡πâ‡∏ß
  });
  
  botLog(
    LOG_LEVELS.INFO,
    "command-cron_job",
    `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏ï‡∏±‡πâ‡∏á cron job ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤ ${thaiTime} (${cronExpression})`
  );
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
app.get("/test-message/:chatId", async (req, res) => {
  try {
    const chatId = req.params.chatId
    console.log(`Sending test message to chat ID: ${chatId}`)
    const result = await bot.sendMessage(chatId, "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó! ü§ñ")
    console.log("Message sent result:", result)
    res.send("Test message sent successfully")
  } catch (error) {
    console.error("Error sending test message:", error)
    res.status(500).send(`Error: ${error.message}`)
  }
})

// ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
function startTest(msg) {
  try {
    const chatId = msg.chat.id

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (!isAdmin(chatId)) {
      bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!")
      botLog(
        LOG_LEVELS.WARN,
        "command-start_test",
        `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start_test`
      )
      return
    }

    botLog(
      LOG_LEVELS.INFO,
      "command-start_test",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /start_test`
    )

    if (isTestCronRunning) {
      bot.sendMessage(chatId, "‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
      botLog(
        LOG_LEVELS.WARN,
        "command-start_test",
        `‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`
      )
      return
    }

    if (testCron) {
      testCron.start()
      isTestCronRunning = true
      bot.sendMessage(chatId, "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ")
      botLog(
        LOG_LEVELS.INFO,
        "command-start_test",
        `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å 2 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      )
    } else {
      bot.sendMessage(chatId, "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏û‡∏ö cron job")
      botLog(
        LOG_LEVELS.ERROR,
        "command-start_test",
        `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° testCron ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á`
      )
    }
  } catch (error) {
    logError("command-start_test", error)
    try {
      bot.sendMessage(msg.chat.id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    } catch (sendError) {
      logError("command-start_test-sendError", sendError)
    }
  }
}

// ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
function stopTest(msg) {
  try {
    const chatId = msg.chat.id

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
    if (!isAdmin(chatId)) {
      bot.sendMessage(chatId, "‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ!")
      botLog(
        LOG_LEVELS.WARN,
        "command-stop_test",
        `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /stop_test`
      )
      return
    }

    botLog(
      LOG_LEVELS.INFO,
      "command-stop_test",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /stop_test`
    )

    if (!isTestCronRunning || !testCron) {
      bot.sendMessage(chatId, "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà!")
      botLog(
        LOG_LEVELS.WARN,
        "command-stop_test",
        `‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà`
      )
      return
    }

    testCron.stop()
    isTestCronRunning = false
    bot.sendMessage(chatId, "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    botLog(
      LOG_LEVELS.INFO,
      "command-stop_test",
      `‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ${chatId} ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    )
  } catch (error) {
    logError("command-stop_test", error)
    try {
      bot.sendMessage(msg.chat.id, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    } catch (sendError) {
      logError("command-stop_test-sendError", sendError)
    }
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏£‡πá‡∏à
if (!hasStarted) {
  startApplication()
}
