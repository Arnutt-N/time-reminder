# Cloud Build configuration for Telegram Reminder Bot (Final Version)
# - Deploys the service first to obtain a URL.
# - Updates the service with its own URL as an environment variable.
# - Sets the Telegram webhook.
# - Performs a final health check on the stable service.

steps:
  # 1) Build image (No changes)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
      - '-t'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:latest'
      - '.'
    env:
      - 'DOCKER_BUILDKIT=1'

  # 2) Push image (No changes)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args:
      - 'push'
      - '--all-tags'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot'
    waitFor: ['build-image']

  # 3) Deploy to Cloud Run (without APP_URL first to create the service)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cloudrun'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'telegram-reminder-bot'
      - '--image'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
      - '--region'
      - 'asia-southeast1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '256Mi'
      - '--cpu'
      - '1'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '0'
      - '--timeout'
      - '300'
      - '--concurrency'
      - '80'
      - '--set-env-vars'
      - >
        NODE_ENV=production,
        TZ=Asia/Bangkok,
        GOOGLE_CLOUD_REGION=asia-southeast1,
        TELEGRAM_BOT_TOKEN=${_TELEGRAM_BOT_TOKEN},
        TELEGRAM_CHAT_ID=${_TELEGRAM_CHAT_ID},
        ADMIN_CHAT_ID=${_ADMIN_CHAT_ID},
        TIDB_HOST=${_TIDB_HOST},
        TIDB_PORT=${_TIDB_PORT},
        TIDB_USER=${_TIDB_USER},
        TIDB_PASSWORD=${_TIDB_PASSWORD},
        TIDB_DATABASE=${_TIDB_DATABASE},
        TIDB_ENABLE_SSL=true,
        LOG_LEVEL=${_LOG_LEVEL},
        LOG_TO_FILE=false,
        CRON_SECRET=${_CRON_SECRET},
        TELEGRAM_WEBHOOK_SECRET=${_TELEGRAM_WEBHOOK_SECRET}
    waitFor: ['push-image']

  # 4) Get the URL and update the service to include APP_URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'set-app-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe telegram-reminder-bot --region=asia-southeast1 --format="value(status.url)")
        echo "Updating service with APP_URL=$$SERVICE_URL"
        gcloud run services update telegram-reminder-bot \
          --region=asia-southeast1 \
          --update-env-vars=APP_URL=$$SERVICE_URL
        # Save the URL to a file for subsequent steps
        echo $$SERVICE_URL > /workspace/service_url.txt
    waitFor: ['deploy-cloudrun']

  # 5) Set Telegram Webhook using the captured URL
  - name: 'gcr.io/cloud-builders/curl'
    id: 'set-telegram-webhook'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(cat /workspace/service_url.txt)
        WEBHOOK_URL="$$SERVICE_URL/webhook"
        echo "Setting Telegram webhook to $$WEBHOOK_URL"
        # The secret token is sent as a header by Telegram, your app must validate it
        curl -fsS "https://api.telegram.org/bot${_TELEGRAM_BOT_TOKEN}/setWebhook?url=$$WEBHOOK_URL&secret_token=${_TELEGRAM_WEBHOOK_SECRET}"
    waitFor: ['set-app-url']

  # 6) Health check using the captured URL
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(cat /workspace/service_url.txt)
        echo "üîç Health checking: $$SERVICE_URL/health"
        echo "Waiting 30 seconds for the new revision to stabilize..."
        sleep 30
        for i in {1..5}; do
          if curl -fsS "$$SERVICE_URL/health"; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Health check attempt $$i failed, retrying in 10s..."
          sleep 10
        done
        echo "‚ùå Health check failed after 5 attempts"
        exit 1
    waitFor: ['set-telegram-webhook']

# Variables for Trigger
substitutions:
  _TELEGRAM_BOT_TOKEN: 'PLACEHOLDER'
  _TELEGRAM_CHAT_ID: 'PLACEHOLDER'
  _ADMIN_CHAT_ID: 'PLACEHOLDER'
  _TIDB_HOST: 'PLACEHOLDER'
  _TIDB_PORT: '4000'
  _TIDB_USER: 'PLACEHOLDER'
  _TIDB_PASSWORD: 'PLACEHOLDER'
  _TIDB_DATABASE: 'telegram_bot'
  _LOG_LEVEL: 'INFO'
  _CRON_SECRET: 'PLACEHOLDER'
  _TELEGRAM_WEBHOOK_SECRET: 'YOUR_VERY_SECRET_RANDOM_STRING_HERE'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  logging: 'CLOUD_LOGGING_ONLY'

timeout: '1200s'

images:
  - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:latest'

tags:
  - 'telegram-bot'
  - 'cloud-run'
  - 'production'

