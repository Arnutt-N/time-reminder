# Cloud Build configuration (Optimized for Cost and Speed)
# - Uses a cost-effective E2_MEDIUM machine type.
# - Implements npm package caching to speed up subsequent builds.

steps:
  # STEP 0: Restore npm cache if it exists
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'restore-npm-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gsutil -m cp -r gs://$PROJECT_ID_cache/node_modules . || true
    waitFor: ['-'] # Start immediately

  # STEP 1: Build Image (Modified to use cache)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args:
      - 'build'
      - '--tag'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
      - '--tag'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:latest'
      - '--cache-from' # Use cache from previous builds
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:latest'
      - '.'
    env: ['DOCKER_BUILDKIT=1']
    waitFor: ['restore-npm-cache']

  # STEP 2: Push image (No changes)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-image'
    args: ['push', '--all-tags', 'gcr.io/$PROJECT_ID/telegram-reminder-bot']
    waitFor: ['build-image']

  # STEP 3: Save npm cache for the next build
  - name: 'gcr.io/cloud-builders/gsutil'
    id: 'save-npm-cache'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # This step runs in parallel with pushing the image
        if [ -d "node_modules" ]; then
          gsutil -m rsync -r node_modules gs://$PROJECT_ID_cache/node_modules
        fi
    waitFor: ['build-image'] # Start as soon as the image is built

  # --- Deployment steps remain the same ---

  # 4) Deploy to Cloud Run WITHOUT traffic
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cloudrun'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'telegram-reminder-bot'
      - '--image'
      - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
      - '--region'
      - 'asia-southeast1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '256Mi'
      - '--cpu'
      - '1'
      - '--max-instances'
      - '10'
      - '--min-instances'
      - '0'
      - '--timeout'
      - '300'
      - '--concurrency'
      - '80'
      - '--no-traffic'
      - '--set-env-vars'
      - >
        NODE_ENV=production,
        TZ=Asia/Bangkok,
        GOOGLE_CLOUD_REGION=asia-southeast1,
        TIDB_PORT=${_TIDB_PORT},
        TIDB_DATABASE=${_TIDB_DATABASE},
        TIDB_ENABLE_SSL=${_TIDB_ENABLE_SSL},
        LOG_LEVEL=${_LOG_LEVEL},
        LOG_TO_FILE=${_LOG_TO_FILE},
        TELEGRAM_BOT_TOKEN=${_TELEGRAM_BOT_TOKEN},
        TELEGRAM_CHAT_ID=${_TELEGRAM_CHAT_ID},
        ADMIN_CHAT_ID=${_ADMIN_CHAT_ID},
        TELEGRAM_WEBHOOK_SECRET=${_TELEGRAM_WEBHOOK_SECRET},
        CRON_SECRET=${_CRON_SECRET},
        TIDB_HOST=${_TIDB_HOST},
        TIDB_USER=${_TIDB_USER},
        TIDB_PASSWORD=${_TIDB_PASSWORD}
    waitFor: ['push-image']

  # 5) Get URL and update service with APP_URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'set-app-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(gcloud run services describe telegram-reminder-bot --region=asia-southeast1 --format="value(status.url)")
        echo "Updating service with APP_URL=$$SERVICE_URL"
        gcloud run services update telegram-reminder-bot \
          --region=asia-southeast1 \
          --update-env-vars=APP_URL=$$SERVICE_URL
        echo $$SERVICE_URL > /workspace/service_url.txt
    waitFor: ['deploy-cloudrun']

  # 6) Route 100% of traffic to the LATEST revision
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'update-traffic'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - 'telegram-reminder-bot'
      - '--to-latest'
      - '--region'
      - 'asia-southeast1'
    waitFor: ['set-app-url']

  # 7) Delegate Webhook Setup (No change)
  - name: 'gcr.io/cloud-builders/curl'
    id: 'set-telegram-webhook'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        echo "üìù Service URL ready: $$SERVICE_URL"
        echo "üîó Telegram webhook will be configured by the application on startup"
        echo "‚úÖ Webhook setup delegated to application"
    waitFor: ['update-traffic']

  # 8) Health check (No change)
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        echo "üîç Health checking: $$SERVICE_URL/health"
        echo "Waiting 30 seconds for traffic to be fully routed..."
        sleep 30
        for i in {1..5}; do
          if curl -fsS "$$SERVICE_URL/health"; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Health check attempt $$i failed, retrying in 10s..."
          sleep 10
        done
        echo "‚ùå Health check failed after 5 attempts"
        exit 1
    waitFor: ['set-telegram-webhook']

# Variables for Trigger
substitutions:
  _TELEGRAM_BOT_TOKEN: 'your_bot_token_here'
  _TELEGRAM_CHAT_ID: 'your_chat_id_here'
  _ADMIN_CHAT_ID: 'your_admin_chat_id_here'
  _TELEGRAM_WEBHOOK_SECRET: 'your_webhook_secret_here'
  _CRON_SECRET: 'your_cron_secret_here'
  _TIDB_HOST: 'your_tidb_host_here'
  _TIDB_USER: 'your_tidb_user_here'
  _TIDB_PASSWORD: 'your_tidb_password_here'
  _TIDB_DATABASE: 'telegram_bot'
  _TIDB_PORT: '4000'
  _TIDB_ENABLE_SSL: 'true'
  _LOG_LEVEL: 'INFO'
  _LOG_TO_FILE: 'false'

# Build options - COST SAVING
options:
  logging: 'CLOUD_LOGGING_ONLY'
  machineType: 'E2_MEDIUM'

timeout: '1200s'

images:
  - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/telegram-reminder-bot:latest'

tags:
  - 'telegram-bot'
  - 'cloud-run'
  - 'production'